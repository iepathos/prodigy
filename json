============================================
    Debtmap v0.2.1
============================================

[TARGET] TOP 10 RECOMMENDATIONS

#1 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/init/mod.rs:126 handle_existing_commands()
- ACTION: Extract validate_2_preconditions (confidence: 63%), process_input_pipeline (confidence: 53%), process_input_pipeline (confidence: 54%) to reduce complexity from 9 to ~0
- IMPACT: -4 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=9 (adj:9), branches=9, cognitive=25, nesting=3, entropy=0.60
- DEPENDENCIES: 3 upstream, 4 downstream
   - CALLERS: tests::test_handle_existing_commands_no_tty, tests::test_handle_existing_commands_with_conflicts, run
   - CALLS: GitDiff::is_empty, UserPrompterImpl::read_line, MockFileSystem::exists, ... (1 more)
- WHY: Cyclomatic complexity of 9 indicates 9 independent paths requiring 9 test cases minimum - extraction will reduce this to 3-5 tests per function. Function has 3 extractable patterns that can be isolated. These 3 extractions will decompose the function into smaller, focused units that are easier to test and understand. Target complexity per function is 5 or less for optimal maintainability.

#2 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/metadata_parser.rs:93 MetadataParser::extract_description()
- ACTION: Extract nested processing, complex calculations to reduce complexity 7 → ~2
- IMPACT: -3 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=7 (adj:7), branches=7, cognitive=15, nesting=4, entropy=0.53
- DEPENDENCIES: 4 upstream, 1 downstream
   - CALLERS: tests::test_extract_description_multiline, MetadataParser::parse_sections, MetadataParser::create_minimal_definition, ... (1 more)
   - CALLS: GitDiff::is_empty
- WHY: Complex function (cyclo=7, cog=15, nesting=4) with 2 suggested extraction patterns. Predicted complexity reduction: 71%

#3 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/metadata_parser.rs:196 MetadataParser::parse_options()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 8 → ~0
- IMPACT: -4 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=8 (adj:8), branches=8, cognitive=21, nesting=5, entropy=0.46
- DEPENDENCIES: 1 upstream, 0 downstream
   - CALLERS: MetadataParser::parse_sections
- WHY: Complex function (cyclo=8, cog=21, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 100%

#4 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/command_parser.rs:14 parse_command_string()
- ACTION: Extract validate_2_preconditions (confidence: 63%) to reduce complexity from 10 to ~8
- IMPACT: -5 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=10 (adj:10), branches=10, cognitive=13, nesting=4, entropy=0.60
- DEPENDENCIES: 11 upstream, 3 downstream
   - CALLERS: tests::test_parse_complex_command, tests::test_parse_command_with_options, tests::test_parse_command_string_simple, ... (8 more)
   - CALLS: GitDiff::is_empty, CommandArg::parse, Command::new
- WHY: Cyclomatic complexity of 10 indicates 10 independent paths requiring 10 test cases minimum - extraction will reduce this to 3-5 tests per function. Function has 1 extractable patterns that can be isolated. This extraction will create a focused, testable unit. Target complexity per function is 5 or less for optimal maintainability.

#5 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/command_discovery.rs:34 CommandDiscovery::scan_commands()
- ACTION: Extract validation logic, complex calculations to reduce complexity 12 → ~1
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=12 (adj:12), branches=12, cognitive=43, nesting=3, entropy=0.46
- DEPENDENCIES: 5 upstream, 1 downstream
   - CALLERS: DynamicCommandRegistry::refresh, tests::test_cache_behavior, tests::test_needs_refresh, ... (2 more)
   - CALLS: CommandRegistry::clone
- WHY: Complex function (cyclo=12, cog=43, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 91%

#6 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/command_validator.rs:226 CommandRegistry::validate_command()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 13 → ~2
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=13 (adj:13), branches=13, cognitive=30, nesting=4, entropy=0.55
- DEPENDENCIES: 1 upstream, 4 downstream
   - CALLERS: validate_command
   - CALLS: CommandArg::is_variable, CommandRegistry::validate_option_value, CacheManager::get, ... (1 more)
- WHY: Complex function (cyclo=13, cog=30, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 84%

#7 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/loader.rs:54 ConfigLoader::load_from_path()
- ACTION: Extract validation logic, complex calculations to reduce complexity 13 → ~0
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=13 (adj:13), branches=13, cognitive=52, nesting=3, entropy=0.38
- DEPENDENCIES: 4 upstream, 2 downstream
   - CALLERS: tests::test_load_from_path_unsupported_format, tests::test_load_from_path_invalid_yaml, tests::test_load_from_path_nonexistent_file, ... (1 more)
   - CALLS: CommandRegistry::clone, CacheManager::get
- WHY: Complex function (cyclo=13, cog=52, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 100%

#8 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/config/dynamic_registry.rs:118 DynamicCommandRegistry::validate_strict()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 12 → ~2
- IMPACT: -6 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=12 (adj:12), branches=12, cognitive=27, nesting=4, entropy=0.57
- DEPENDENCIES: 1 upstream, 3 downstream
   - CALLERS: DynamicCommandRegistry::validate_against_definition
   - CALLS: DynamicCommandRegistry::validate_option_value, DynamicCommandRegistry::validate_argument_type, CommandArg::is_variable
- WHY: Complex function (cyclo=12, cog=27, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 83%

#9 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/worktree/manager.rs:102 WorktreeManager::new()
- ACTION: Extract validation logic, complex calculations to reduce complexity 8 → ~3
- IMPACT: -4 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=8 (adj:8), branches=8, cognitive=17, nesting=1, entropy=0.39
- DEPENDENCIES: 35 upstream, 1 downstream
   - CALLERS: run_worktree_command, test_list_interrupted_sessions_none_interrupted, test_merge_updates_state, ... (32 more)
   - CALLS: MockFileSystem::exists
- WHY: Complex function (cyclo=8, cog=17, nesting=1) with 2 suggested extraction patterns. Predicted complexity reduction: 62%

#10 SCORE: 10.00 [CRITICAL]
- LOCATION: ./src/worktree/manager.rs:403 WorktreeManager::merge_session()
- ACTION: Extract validation logic, nested processing, complex calculations to reduce complexity 23 → ~2
- IMPACT: -11 complexity, -3.5 risk
- COMPLEXITY: cyclomatic=23 (adj:23), branches=23, cognitive=74, nesting=5, entropy=0.38
- DEPENDENCIES: 4 upstream, 15 downstream
   - CALLERS: tests::test_merge_session_claude_cli_failure, handle_merge_command, DefaultCookOrchestrator::cleanup, ... (1 more)
   - CALLS: MockFileSystem::exists, WorktreeManager::list_sessions, WorktreeManager::cleanup_session_after_merge, ... (12 more)
- WHY: Complex function (cyclo=23, cog=74, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 91%

[STATS] TOTAL DEBT SCORE: 686
