{
  "nodes": {
    "src/metrics/registry.rs": {
      "path": "src/metrics/registry.rs",
      "module_type": "Library",
      "imports": [
        "super::events::{",
        "anyhow::Result",
        "std::future::Future",
        "std::sync::Arc",
        "std::time::Duration",
        "tokio::sync::RwLock",
        "rand::Rng",
        "mod::tests {",
        "super::*",
        "crate::metrics::backends::MemoryMetricsCollector"
      ],
      "exports": [
        "MetricsConfig",
        "MetricsRegistry",
        "new",
        "config",
        "is_enabled"
      ],
      "external_deps": []
    },
    "src/session/state.rs": {
      "path": "src/session/state.rs",
      "module_type": "Library",
      "imports": [
        "super::{CommitInfo, ExecutedCommand, IterationChanges}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashSet",
        "std::path::PathBuf",
        "std::time::Duration",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "SessionState",
        "is_terminal",
        "is_active",
        "current_iteration",
        "SessionSummary",
        "SessionProgress",
        "new",
        "completion_percentage",
        "total_lines_changed",
        "success_rate",
        "all_commits"
      ],
      "external_deps": []
    },
    "src/cook/metrics/mod.rs": {
      "path": "src/cook/metrics/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "serde::{Deserialize, Serialize}",
        "std::path::Path"
      ],
      "exports": [
        "ProjectMetrics",
        "MetricsCoordinator",
        "MetricsCollectorImpl",
        "MetricsCollectorTrait",
        "MetricsReporter",
        "MetricsReporterImpl"
      ],
      "external_deps": []
    },
    "src/context/architecture.rs": {
      "path": "src/context/architecture.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::context::dependencies::ArchitecturalLayer",
        "anyhow::Result",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*"
      ],
      "exports": [
        "ArchitectureExtractor",
        "BasicArchitectureExtractor",
        "new",
        "detect_components",
        "check_violations_graph",
        "authenticate"
      ],
      "external_deps": []
    },
    "src/config/command_validator.rs": {
      "path": "src/config/command_validator.rs",
      "module_type": "Library",
      "imports": [
        "super::command::{Command, CommandMetadata}",
        "anyhow::{anyhow, Result}",
        "once_cell::sync::Lazy",
        "std::collections::HashMap",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "CommandDefinition",
        "ArgumentDef",
        "OptionDef",
        "ArgumentType",
        "CommandRegistry",
        "new",
        "register",
        "get",
        "validate_command",
        "apply_defaults",
        "list_commands",
        "COMMAND_REGISTRY",
        "validate_command",
        "apply_command_defaults"
      ],
      "external_deps": []
    },
    "src/worktree/mod.rs": {
      "path": "src/worktree/mod.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "std::path::PathBuf",
        "mod::test_state",
        "mod::tests"
      ],
      "exports": [
        "WorktreeSession",
        "new",
        "WorktreeManager",
        "Checkpoint",
        "CommandType",
        "InterruptionType",
        "IterationInfo",
        "WorktreeState",
        "WorktreeStats",
        "WorktreeStatus"
      ],
      "external_deps": []
    },
    "src/main.rs": {
      "path": "src/main.rs",
      "module_type": "Binary",
      "imports": [
        "clap::{CommandFactory, Parser, Subcommand}",
        "std::path::PathBuf",
        "tracing::{debug, error, trace}",
        "mmm::subprocess::SubprocessManager",
        "mmm::worktree::WorktreeManager"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/init/templates.rs": {
      "path": "src/init/templates.rs",
      "module_type": "Library",
      "imports": [
        "std::collections::HashMap"
      ],
      "exports": [
        "CommandTemplate",
        "MMM_CODE_REVIEW",
        "MMM_IMPLEMENT_SPEC",
        "MMM_LINT",
        "MMM_PRODUCT_ENHANCE",
        "MMM_MERGE_WORKTREE",
        "MMM_CLEANUP_TECH_DEBT",
        "get_all_templates",
        "get_templates_by_names"
      ],
      "external_deps": []
    },
    "src/lib.rs": {
      "path": "src/lib.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [],
      "external_deps": []
    },
    "src/subprocess/mock.rs": {
      "path": "src/subprocess/mock.rs",
      "module_type": "Library",
      "imports": [
        "async_trait::async_trait",
        "std::sync::{Arc, Mutex}",
        "std::time::Duration",
        "super::error::ProcessError",
        "super::runner::{ExitStatus, ProcessCommand, ProcessOutput, ProcessRunner, ProcessStream}"
      ],
      "exports": [
        "MockProcessRunner",
        "MockCommandConfig",
        "new",
        "expect_command",
        "verify_called",
        "get_call_history",
        "reset",
        "with_args",
        "returns_stdout",
        "returns_stderr",
        "returns_exit_code",
        "returns_success",
        "times",
        "finish"
      ],
      "external_deps": []
    },
    "src/metrics/quality.rs": {
      "path": "src/metrics/quality.rs",
      "module_type": "Library",
      "imports": [
        "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::path::Path",
        "tracing::debug"
      ],
      "exports": [
        "QualityMetrics",
        "QualityAnalyzer"
      ],
      "external_deps": []
    },
    "src/context/conventions.rs": {
      "path": "src/context/conventions.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "mod::tests {",
        "super::*",
        "std::fs",
        "tempfile::TempDir",
        "std::error::Error"
      ],
      "exports": [
        "ConventionDetector",
        "ProjectConventions",
        "NamingRules",
        "NamingStyle",
        "Pattern",
        "TestingConventions",
        "Idiom",
        "FileConventionInfo",
        "get_file_conventions",
        "get_naming_violations",
        "BasicConventionDetector",
        "new",
        "detect_naming_style",
        "detect_patterns",
        "extract_function_names",
        "extract_variable_names",
        "extract_type_names",
        "extract_constant_names",
        "or",
        "if",
        "detect_test_conventions",
        "get_user",
        "API_VERSION"
      ],
      "external_deps": []
    },
    "src/worktree/test_state.rs": {
      "path": "src/worktree/test_state.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::subprocess::SubprocessManager",
        "crate::worktree::{WorktreeState, WorktreeStatus}",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/abstractions/claude.rs": {
      "path": "src/abstractions/claude.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::exit_status::ExitStatusExt",
        "crate::subprocess::{",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "std::time::Duration",
        "tokio::time::sleep",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "ClaudeClient",
        "RealClaudeClient",
        "new",
        "with_subprocess",
        "MockClaudeClient",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/analysis/cache.rs": {
      "path": "src/cook/analysis/cache.rs",
      "module_type": "Library",
      "imports": [
        "crate::context::AnalysisResult",
        "anyhow::Result",
        "async_trait::async_trait",
        "chrono::{DateTime, Duration, Utc}",
        "std::path::{Path, PathBuf}",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "crate::context::AnalysisMetadata",
        "tempfile::TempDir",
        "crate::context::{",
        "std::collections::{BinaryHeap, HashMap}"
      ],
      "exports": [
        "AnalysisCache",
        "AnalysisCacheImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/interaction/mod.rs": {
      "path": "src/cook/interaction/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "super::*",
        "std::sync::Mutex"
      ],
      "exports": [
        "UserInteraction",
        "SpinnerHandle",
        "DefaultUserInteraction",
        "new",
        "MockUserInteraction",
        "new",
        "add_yes_no_response",
        "add_text_response",
        "get_messages",
        "MockSpinnerHandle",
        "ProgressDisplay",
        "ProgressDisplayImpl",
        "UserPrompter",
        "UserPrompterImpl"
      ],
      "external_deps": []
    },
    "src/config/dynamic_registry.rs": {
      "path": "src/config/dynamic_registry.rs",
      "module_type": "Library",
      "imports": [
        "super::command::Command",
        "super::command_discovery::CommandDiscovery",
        "super::command_validator::{CommandDefinition, CommandRegistry as StaticCommandRegistry}",
        "super::metadata_parser::MetadataParser",
        "anyhow::{anyhow, Result}",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "super::command_validator::ArgumentType",
        "super::command_validator::ArgumentType",
        "mod::tests {",
        "super::*",
        "crate::config::{Command, CommandArg}",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "DynamicCommandRegistry",
        "get",
        "validate_command",
        "apply_defaults",
        "list_commands"
      ],
      "external_deps": []
    },
    "src/testing/mod.rs": {
      "path": "src/testing/mod.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
        "anyhow::Result",
        "std::path::PathBuf",
        "tempfile::TempDir",
        "std::fs",
        "super::*",
        "std::fs",
        "std::path::Path",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "TestContext",
        "new",
        "with_mocks",
        "temp_path",
        "create_test_file",
        "MockGitBuilder",
        "new",
        "is_repo",
        "build",
        "MockClaudeBuilder",
        "new",
        "is_available",
        "build",
        "TestFixtures",
        "unavailable_claude",
        "setup_test_project",
        "create_test_file",
        "create_test_files",
        "TempDir"
      ],
      "external_deps": []
    },
    "src/worktree/state.rs": {
      "path": "src/worktree/state.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "WorktreeState",
        "WorktreeStatus",
        "IterationInfo",
        "WorktreeStats",
        "InterruptionType",
        "Checkpoint",
        "CommandType"
      ],
      "external_deps": []
    },
    "src/cook/session/state.rs": {
      "path": "src/cook/session/state.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "std::path::PathBuf"
      ],
      "exports": [
        "SessionStatus",
        "SessionState",
        "new",
        "complete",
        "fail",
        "interrupt",
        "add_files_changed",
        "increment_iteration",
        "duration"
      ],
      "external_deps": []
    },
    "src/session/manager.rs": {
      "path": "src/session/manager.rs",
      "module_type": "Library",
      "imports": [
        "super::{",
        "anyhow::{anyhow, Result}",
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::sync::Arc",
        "std::time::Instant",
        "tokio::sync::RwLock",
        "mod::tests {",
        "super::*",
        "crate::session::IterationChanges",
        "std::path::PathBuf"
      ],
      "exports": [
        "SessionManager",
        "InMemorySessionManager",
        "new"
      ],
      "external_deps": []
    },
    "tests/config_integration_tests.rs": {
      "path": "tests/config_integration_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::fs",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/collector.rs": {
      "path": "src/metrics/collector.rs",
      "module_type": "Library",
      "imports": [
        "super::{ComplexityCalculator, ImprovementMetrics, PerformanceProfiler, QualityAnalyzer}",
        "crate::subprocess::SubprocessManager",
        "anyhow::Result",
        "std::path::Path",
        "tokio::task",
        "mod::tests {",
        "super::*",
        "std::fs",
        "tempfile::TempDir"
      ],
      "exports": [
        "MetricsCollector",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/execution/claude.rs": {
      "path": "src/cook/execution/claude.rs",
      "module_type": "Library",
      "imports": [
        "super::{CommandExecutor, CommandRunner, ExecutionContext, ExecutionResult}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::path::Path",
        "mod::tests {",
        "super::*",
        "crate::cook::execution::runner::tests::MockCommandRunner"
      ],
      "exports": [
        "ClaudeExecutor",
        "ClaudeExecutorImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/config/metadata_parser.rs": {
      "path": "src/config/metadata_parser.rs",
      "module_type": "Library",
      "imports": [
        "super::command::CommandMetadata",
        "super::command_discovery::CommandFile",
        "super::command_validator::{ArgumentDef, ArgumentType, CommandDefinition, OptionDef}",
        "anyhow::{anyhow, Result}",
        "regex::Regex",
        "serde::{Deserialize, Serialize}",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf",
        "std::time::SystemTime"
      ],
      "exports": [
        "MetadataParser",
        "new",
        "parse_command_file",
        "create_minimal_definition"
      ],
      "external_deps": []
    },
    "src/cook/execution/mod.rs": {
      "path": "src/cook/execution/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::collections::HashMap"
      ],
      "exports": [
        "ExecutionContext",
        "ExecutionResult",
        "CommandExecutor",
        "ClaudeExecutor",
        "ClaudeExecutorImpl",
        "CommandRunner",
        "RealCommandRunner"
      ],
      "external_deps": []
    },
    "tests/subprocess_tests.rs": {
      "path": "tests/subprocess_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::process::Command",
        "tokio::time::{timeout, Duration}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/analysis/runner.rs": {
      "path": "src/cook/analysis/runner.rs",
      "module_type": "Library",
      "imports": [
        "super::AnalysisCoordinator",
        "crate::context::{AnalysisMetadata, AnalysisResult}",
        "crate::context::{ContextAnalyzer, ProjectAnalyzer}",
        "crate::cook::execution::CommandRunner",
        "anyhow::{Context, Result}",
        "async_trait::async_trait",
        "chrono::Utc",
        "std::path::Path",
        "std::time::Instant",
        "mod::tests {",
        "super::*",
        "crate::cook::execution::runner::tests::MockCommandRunner",
        "crate::cook::execution::ExecutionResult",
        "tempfile::TempDir"
      ],
      "exports": [
        "AnalysisRunner",
        "AnalysisRunnerImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/tests.rs": {
      "path": "src/cook/tests.rs",
      "module_type": "Library",
      "imports": [
        "mod::cook_tests {",
        "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
        "crate::cook::command::CookCommand",
        "crate::testing::{TestContext, TestFixtures}",
        "std::path::PathBuf",
        "mod::workflow_parsing_tests {",
        "crate::config::command::{InputMethod, WorkflowCommand}",
        "crate::config::workflow::WorkflowConfig",
        "mod::retry_tests {",
        "crate::cook::retry::{format_subprocess_error, is_transient_error}",
        "mod::git_ops_tests {",
        "crate::abstractions::{GitOperations, MockGitOperations}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/performance.rs": {
      "path": "src/metrics/performance.rs",
      "module_type": "Library",
      "imports": [
        "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "std::time::{Duration, Instant}",
        "tracing::debug",
        "std::os::unix::fs::PermissionsExt"
      ],
      "exports": [
        "PerformanceMetrics",
        "PerformanceProfiler",
        "new"
      ],
      "external_deps": []
    },
    "src/abstractions/mod.rs": {
      "path": "src/abstractions/mod.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [
        "ClaudeClient",
        "MockClaudeClient",
        "RealClaudeClient",
        "ExitStatusExt",
        "GitOperations",
        "MockGitOperations",
        "RealGitOperations"
      ],
      "external_deps": []
    },
    "src/metrics/history.rs": {
      "path": "src/metrics/history.rs",
      "module_type": "Library",
      "imports": [
        "super::ImprovementMetrics",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "MetricsHistory",
        "new",
        "add_snapshot",
        "latest",
        "get_previous",
        "calculate_velocity",
        "MetricsSnapshot",
        "MetricsTrends",
        "Trend",
        "MetricsBaselines"
      ],
      "external_deps": []
    },
    "src/context/tarpaulin_coverage.rs": {
      "path": "src/context/tarpaulin_coverage.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::Deserialize",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "super::test_coverage::{",
        "crate::subprocess::SubprocessManager",
        "crate::subprocess::ProcessCommandBuilder",
        "mod::tests {",
        "super::*",
        "std::fs",
        "tempfile::TempDir"
      ],
      "exports": [
        "TarpaulinCoverageAnalyzer",
        "new",
        "example",
        "add"
      ],
      "external_deps": []
    },
    "src/analyze/mod.rs": {
      "path": "src/analyze/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "command::AnalyzeCommand",
        "mod::tests"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/edge_case_tests.rs": {
      "path": "tests/edge_case_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::PathBuf",
        "std::process::Command",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread",
        "std::thread",
        "std::time::Duration"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/storage.rs": {
      "path": "src/metrics/storage.rs",
      "module_type": "Library",
      "imports": [
        "super::{ImprovementMetrics, MetricsHistory}",
        "anyhow::{Context, Result}",
        "std::path::{Path, PathBuf}",
        "tracing::debug",
        "mod::tests {",
        "super::*",
        "std::time::Duration",
        "tempfile::TempDir"
      ],
      "exports": [
        "MetricsStorage",
        "new",
        "ensure_directory",
        "save_current",
        "load_current",
        "save_history",
        "load_history",
        "generate_report",
        "save_report"
      ],
      "external_deps": []
    },
    "src/metrics/complexity.rs": {
      "path": "src/metrics/complexity.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "syn::{visit::Visit, Block, Expr}",
        "tracing::debug"
      ],
      "exports": [
        "ComplexityMetrics",
        "ComplexityCalculator",
        "new",
        "calculate"
      ],
      "external_deps": []
    },
    "tests/integration_test_cook_path.rs": {
      "path": "tests/integration_test_cook_path.rs",
      "module_type": "Library",
      "imports": [
        "assert_cmd::prelude::*",
        "predicates::prelude::*",
        "std::fs",
        "std::process::Command",
        "tempfile::TempDir",
        "std::env"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/context.rs": {
      "path": "src/metrics/context.rs",
      "module_type": "Library",
      "imports": [
        "super::events::{MetricEvent, Tags}",
        "super::registry::MetricsRegistry",
        "anyhow::Result",
        "std::sync::Arc",
        "mod::tests {",
        "super::*",
        "crate::metrics::{backends::MemoryMetricsCollector, registry::MetricsConfig}"
      ],
      "exports": [
        "MetricsContext",
        "new",
        "child",
        "registry",
        "tags",
        "MetricsContextBuilder",
        "new",
        "tag",
        "tags",
        "build"
      ],
      "external_deps": []
    },
    "src/config/workflow.rs": {
      "path": "src/config/workflow.rs",
      "module_type": "Library",
      "imports": [
        "super::command::WorkflowCommand",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "WorkflowConfig"
      ],
      "external_deps": []
    },
    "src/cook/metrics/collector.rs": {
      "path": "src/cook/metrics/collector.rs",
      "module_type": "Library",
      "imports": [
        "super::{MetricsCoordinator, ProjectMetrics}",
        "crate::cook::execution::CommandRunner",
        "crate::cook::metrics::reporter::MetricsReporter",
        "crate::metrics::MetricsCollector",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path",
        "mod::tests {",
        "super::*",
        "crate::cook::execution::runner::tests::MockCommandRunner",
        "tempfile::TempDir"
      ],
      "exports": [
        "MetricsCollectorTrait",
        "MetricsCollectorImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/session/adapter.rs": {
      "path": "src/cook/session/adapter.rs",
      "module_type": "Library",
      "imports": [
        "crate::session::{",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "super::{"
      ],
      "exports": [
        "SessionManagerAdapter",
        "new",
        "inner"
      ],
      "external_deps": []
    },
    "src/context/dependencies.rs": {
      "path": "src/context/dependencies.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::{HashMap, HashSet}",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "std::path::Path",
        "std::collections::{HashMap, HashSet}",
        "crate::context::AnalysisResult",
        "super::*",
        "mod::submodule"
      ],
      "exports": [
        "DependencyAnalyzer",
        "DependencyGraph",
        "ModuleNode",
        "ModuleType",
        "DependencyEdge",
        "DependencyType",
        "ArchitecturalLayer",
        "get_file_dependencies",
        "get_coupling_hotspots",
        "BasicDependencyAnalyzer",
        "new",
        "new(r\"pub\\s+use\\s+[^"
      ],
      "external_deps": []
    },
    "src/metrics/backends.rs": {
      "path": "src/metrics/backends.rs",
      "module_type": "Library",
      "imports": [
        "super::events::{",
        "anyhow::{Context, Result}",
        "async_trait::async_trait",
        "chrono::Utc",
        "serde::{Deserialize, Serialize}",
        "std::path::PathBuf",
        "std::sync::Arc",
        "std::time::Duration",
        "tokio::fs",
        "tokio::io::AsyncWriteExt",
        "tokio::sync::{Mutex, RwLock}",
        "mod::tests {",
        "super::*",
        "crate::metrics::Tags",
        "tempfile::TempDir"
      ],
      "exports": [
        "CollectorConfig",
        "FileMetricsCollector",
        "new",
        "with_config",
        "MemoryMetricsCollector",
        "new",
        "with_config",
        "CompositeMetricsCollector",
        "new"
      ],
      "external_deps": []
    },
    "src/init/mod.rs": {
      "path": "src/init/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "crate::init::command::InitCommand",
        "crate::subprocess::SubprocessManager",
        "crate::subprocess::ProcessCommandBuilder",
        "std::io::{self, Write}",
        "mod::tests {",
        "super::*",
        "crate::init::command::InitCommand",
        "tempfile::TempDir",
        "crate::subprocess::ProcessCommandBuilder",
        "crate::subprocess::ProcessCommandBuilder",
        "crate::subprocess::ProcessCommandBuilder",
        "crate::subprocess::ProcessCommandBuilder",
        "crate::subprocess::ProcessCommandBuilder",
        "crate::subprocess::ProcessCommandBuilder"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/worktree/manager.rs": {
      "path": "src/worktree/manager.rs",
      "module_type": "Library",
      "imports": [
        "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
        "anyhow::{anyhow, Context, Result}",
        "chrono::Utc",
        "std::fs",
        "std::path::PathBuf",
        "uuid::Uuid",
        "super::{IterationInfo, WorktreeSession, WorktreeState, WorktreeStats, WorktreeStatus}",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "WorktreeManager",
        "new",
        "update_session_state",
        "get_session_state",
        "create_checkpoint",
        "update_checkpoint",
        "load_session_state",
        "restore_session",
        "list_interrupted_sessions",
        "mark_session_abandoned",
        "get_last_successful_command"
      ],
      "external_deps": []
    },
    "src/cook/metrics/reporter.rs": {
      "path": "src/cook/metrics/reporter.rs",
      "module_type": "Library",
      "imports": [
        "super::ProjectMetrics",
        "anyhow::Result",
        "async_trait::async_trait",
        "mod::tests {",
        "super::*",
        "chrono::Utc"
      ],
      "exports": [
        "MetricsReporter",
        "MetricsTrends",
        "TrendDirection",
        "MetricsReporterImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/subprocess/runner.rs": {
      "path": "src/subprocess/runner.rs",
      "module_type": "Library",
      "imports": [
        "async_trait::async_trait",
        "futures::stream::Stream",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "std::pin::Pin",
        "std::time::Duration",
        "super::error::ProcessError",
        "tokio::io::AsyncWriteExt",
        "std::os::unix::process::ExitStatusExt"
      ],
      "exports": [
        "ProcessCommand",
        "ProcessOutput",
        "ExitStatus",
        "success",
        "code",
        "ExitStatusHelper",
        "success",
        "failure",
        "ProcessStreamItem",
        "ProcessStreamFut",
        "ProcessStream",
        "ProcessRunner",
        "TokioProcessRunner"
      ],
      "external_deps": []
    },
    "src/abstractions/exit_status.rs": {
      "path": "src/abstractions/exit_status.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [
        "ExitStatusExt",
        "ExitStatusExt"
      ],
      "external_deps": []
    },
    "src/cook/interaction/prompts.rs": {
      "path": "src/cook/interaction/prompts.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::io::{self, Write}",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "UserPrompter",
        "UserPrompterImpl",
        "new",
        "MockPrompter",
        "new"
      ],
      "external_deps": []
    },
    "src/session/persistence.rs": {
      "path": "src/session/persistence.rs",
      "module_type": "Library",
      "imports": [
        "super::{SessionConfig, SessionId, SessionState, TimestampedEvent}",
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashSet",
        "std::path::PathBuf",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "PersistedSession",
        "SessionCheckpoint",
        "StateSnapshot",
        "latest_checkpoint",
        "is_resumable",
        "last_iteration"
      ],
      "external_deps": []
    },
    "src/analyze/tests.rs": {
      "path": "src/analyze/tests.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "tempfile::TempDir",
        "mod::command_tests {",
        "super::*",
        "crate::analyze::command",
        "anyhow::Result",
        "std::fs",
        "mod::tests {"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/context/mod.rs": {
      "path": "src/context/mod.rs",
      "module_type": "Library",
      "imports": [
        "self::dependencies::ArchitecturalLayer",
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "AnalysisResult",
        "ArchitectureInfo",
        "ComponentInfo",
        "ArchitectureViolation",
        "ViolationSeverity",
        "AnalysisMetadata",
        "FileContext",
        "FileConventions",
        "Suggestion",
        "SuggestionPriority",
        "SuggestionCategory",
        "ImpactLevel",
        "ContextAnalyzer",
        "load_analysis",
        "save_analysis",
        "ProjectAnalyzer",
        "ArchitectureExtractor",
        "ConventionDetector",
        "ProjectConventions",
        "DebtItem",
        "TechnicalDebtMap",
        "TechnicalDebtMapper",
        "DependencyAnalyzer",
        "DependencyGraph",
        "HybridCoverageAnalyzer",
        "HybridCoverageReport",
        "TestCoverageAnalyzer",
        "TestCoverageMap"
      ],
      "external_deps": []
    },
    "src/metrics/testing.rs": {
      "path": "src/metrics/testing.rs",
      "module_type": "Library",
      "imports": [
        "super::backends::MemoryMetricsCollector",
        "super::events::{MetricEvent, Tags}",
        "super::registry::{MetricsConfig, MetricsRegistry}",
        "std::sync::Arc",
        "std::time::Duration",
        "mod::tests {",
        "super::*",
        "std::time::Duration",
        "tokio::time::sleep"
      ],
      "exports": [
        "MetricsAssert",
        "new",
        "with_collector",
        "collector",
        "create_disabled_registry"
      ],
      "external_deps": []
    },
    "tests/context_optimization_tests.rs": {
      "path": "tests/context_optimization_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "mmm::context::{",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "tempfile::TempDir",
        "mmm::context::size_manager::OptimizableForSize",
        "mmm::context::{"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/config/command_discovery.rs": {
      "path": "src/config/command_discovery.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "std::time::SystemTime",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "CommandDiscovery",
        "new",
        "needs_refresh",
        "clear_cache",
        "CommandFile"
      ],
      "external_deps": []
    },
    "src/cook/session/mod.rs": {
      "path": "src/cook/session/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path"
      ],
      "exports": [
        "SessionManager",
        "SessionUpdate",
        "SessionManagerAdapter",
        "SessionState",
        "SessionStatus",
        "SessionSummary",
        "SessionTracker",
        "SessionTrackerImpl"
      ],
      "external_deps": []
    },
    "src/cook/session/summary.rs": {
      "path": "src/cook/session/summary.rs",
      "module_type": "Library",
      "imports": [
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "SessionSummary"
      ],
      "external_deps": []
    },
    "src/subprocess/builder.rs": {
      "path": "src/subprocess/builder.rs",
      "module_type": "Library",
      "imports": [
        "std::collections::HashMap",
        "std::path::Path",
        "std::time::Duration",
        "crate::subprocess::ProcessCommand"
      ],
      "exports": [
        "ProcessCommandBuilder",
        "new",
        "arg",
        "args",
        "env",
        "envs",
        "current_dir",
        "timeout",
        "stdin",
        "build"
      ],
      "external_deps": []
    },
    "src/cook/mod_old.rs": {
      "path": "src/cook/mod_old.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "mod::mod_tests",
        "crate::config::{workflow::WorkflowConfig, Config, ConfigLoader}",
        "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
        "crate::metrics::{MetricsCollector, MetricsHistory, MetricsStorage}",
        "crate::simple_state::StateManager",
        "crate::worktree::WorktreeManager",
        "anyhow::{anyhow, Context as _, Result}",
        "chrono::Utc",
        "git_ops::get_last_commit_message",
        "retry::check_claude_cli",
        "std::io::{self, Write}",
        "std::path::{Path, PathBuf}",
        "std::sync::Arc",
        "tokio::process::Command",
        "workflow::WorkflowExecutor",
        "glob::glob",
        "glob::glob",
        "std::collections::HashMap",
        "mod::cook_inline_tests {",
        "super::*",
        "std::path::PathBuf",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/session/config.rs": {
      "path": "src/session/config.rs",
      "module_type": "Library",
      "imports": [
        "crate::config::workflow::WorkflowConfig",
        "serde::{Deserialize, Serialize}",
        "std::path::PathBuf",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "SessionConfig",
        "ExecutionMode",
        "is_worktree",
        "worktree_name",
        "SessionOptions",
        "from_flags"
      ],
      "external_deps": []
    },
    "src/session/storage.rs": {
      "path": "src/session/storage.rs",
      "module_type": "Library",
      "imports": [
        "super::{PersistedSession, SessionId}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::PathBuf",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "SessionStorage",
        "FileSessionStorage",
        "new",
        "InMemoryStorage",
        "new"
      ],
      "external_deps": []
    },
    "src/simple_state/types.rs": {
      "path": "src/simple_state/types.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "State",
        "SessionRecord",
        "new",
        "new",
        "complete"
      ],
      "external_deps": []
    },
    "src/worktree/tests.rs": {
      "path": "src/worktree/tests.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::subprocess::SubprocessManager",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/context/size_manager.rs": {
      "path": "src/context/size_manager.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::path::Path",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "ContextSizeConfig",
        "ContextSizeMetadata",
        "FileSizeInfo",
        "ContextSizeManager",
        "new",
        "with_config",
        "check_size",
        "optimize_for_size",
        "analyze_context_sizes",
        "print_warnings",
        "SizeCheckResult",
        "OptimizedValue",
        "OptimizableForSize"
      ],
      "external_deps": []
    },
    "src/cook/mod.rs": {
      "path": "src/cook/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "mod::mod_tests",
        "crate::abstractions::git::RealGitOperations",
        "crate::config::{workflow::WorkflowConfig, ConfigLoader}",
        "crate::simple_state::StateManager",
        "anyhow::{anyhow, Context as _, Result}",
        "std::path::Path",
        "std::sync::Arc",
        "mod::cook_tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "CookCommand",
        "CookConfig",
        "CookOrchestrator",
        "DefaultCookOrchestrator"
      ],
      "external_deps": []
    },
    "src/context/test_coverage.rs": {
      "path": "src/context/test_coverage.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "TestCoverageAnalyzer",
        "TestCoverageMap",
        "FileCoverage",
        "UntestedFunction",
        "CriticalPath",
        "Criticality",
        "RiskLevel",
        "get_file_coverage",
        "get_critical_gaps",
        "BasicTestCoverageAnalyzer",
        "new",
        "extract_functions",
        "find_tested_functions",
        "calculate_overall_coverage",
        "identify_critical_paths",
        "is_test_file",
        "add",
        "multiply",
        "divide"
      ],
      "external_deps": []
    },
    "src/context/hybrid_coverage.rs": {
      "path": "src/context/hybrid_coverage.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "crate::metrics::MetricsSnapshot",
        "super::test_coverage::TestCoverageMap",
        "mod::tests {",
        "super::*",
        "crate::context::test_coverage::FileCoverage"
      ],
      "exports": [
        "CoverageGap",
        "HybridCoverageAnalyzer",
        "HybridCoverageReport",
        "PriorityCoverageGap",
        "FileQualityMetrics",
        "TrendDirection",
        "QualityCorrelation",
        "CorrelationEntry",
        "CriticalFile",
        "BasicHybridCoverageAnalyzer",
        "new",
        "get_recommendations",
        "to_compact_summary"
      ],
      "external_deps": []
    },
    "src/context/debt.rs": {
      "path": "src/context/debt.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::cmp::Ordering",
        "std::collections::{BinaryHeap, HashMap}",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*"
      ],
      "exports": [
        "TechnicalDebtMapper",
        "TechnicalDebtMap",
        "DebtItem",
        "DebtType",
        "ComplexityHotspot",
        "CodeBlock",
        "get_file_debt",
        "get_file_complexity",
        "get_priority_items",
        "DebtAggregationConfig",
        "DebtSummary",
        "BasicTechnicalDebtMapper",
        "new",
        "with_config",
        "find_debt_comments",
        "calculate_complexity",
        "find_duplication"
      ],
      "external_deps": []
    },
    "src/cook/command.rs": {
      "path": "src/cook/command.rs",
      "module_type": "Library",
      "imports": [
        "clap::Args",
        "std::path::PathBuf"
      ],
      "exports": [
        "CookCommand"
      ],
      "external_deps": []
    },
    "tests/error_handling_tests.rs": {
      "path": "tests/error_handling_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::process::Command",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread",
        "mod::cook_error_recovery {",
        "anyhow::{anyhow, Result}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/git/parsers.rs": {
      "path": "src/git/parsers.rs",
      "module_type": "Library",
      "imports": [
        "super::types::*",
        "anyhow::Result",
        "std::path::PathBuf",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "parse_status_output",
        "parse_diff_output",
        "parse_worktree_list"
      ],
      "external_deps": []
    },
    "src/analyze/command.rs": {
      "path": "src/analyze/command.rs",
      "module_type": "Library",
      "imports": [
        "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
        "anyhow::{Context, Result}",
        "std::path::PathBuf"
      ],
      "exports": [
        "AnalyzeCommand"
      ],
      "external_deps": []
    },
    "src/cook/workflow/mod.rs": {
      "path": "src/cook/workflow/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::executor"
      ],
      "exports": [
        "ExtendedWorkflowConfig",
        "WorkflowExecutor",
        "WorkflowStep"
      ],
      "external_deps": []
    },
    "src/git/mod.rs": {
      "path": "src/git/mod.rs",
      "module_type": "Library",
      "imports": [
        "crate::subprocess::{ProcessCommandBuilder, ProcessRunner}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::{Path, PathBuf}",
        "std::sync::Arc",
        "mod::tests {",
        "super::*",
        "crate::subprocess::MockProcessRunner",
        "std::sync::Arc",
        "tempfile::TempDir"
      ],
      "exports": [
        "GitReader",
        "GitWriter",
        "GitWorktree",
        "GitOperations",
        "GitCommandRunner",
        "new",
        "GitError",
        "*",
        "*",
        "*"
      ],
      "external_deps": []
    },
    "src/subprocess/git.rs": {
      "path": "src/subprocess/git.rs",
      "module_type": "Library",
      "imports": [
        "async_trait::async_trait",
        "std::path::Path",
        "std::sync::Arc",
        "super::builder::ProcessCommandBuilder",
        "super::error::ProcessError",
        "super::runner::ProcessRunner",
        "crate::abstractions::exit_status::ExitStatusExt"
      ],
      "exports": [
        "GitStatus",
        "GitRunner",
        "GitRunnerImpl",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/retry.rs": {
      "path": "src/cook/retry.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{ClaudeClient, RealClaudeClient}",
        "anyhow::{Context, Result}",
        "once_cell::sync::Lazy",
        "std::sync::Arc",
        "std::time::Duration",
        "tokio::process::Command",
        "tokio::time::sleep",
        "mod::tests {",
        "super::*",
        "std::time::Instant",
        "mod::additional_tests {",
        "super::*"
      ],
      "exports": [
        "is_transient_error",
        "format_subprocess_error"
      ],
      "external_deps": []
    },
    "src/session/mod.rs": {
      "path": "src/session/mod.rs",
      "module_type": "Library",
      "imports": [
        "serde::{Deserialize, Serialize}",
        "std::fmt",
        "uuid::Uuid",
        "mod::tests"
      ],
      "exports": [
        "SessionId",
        "new",
        "from_string",
        "as_str",
        "SessionInfo",
        "IterationChanges",
        "CommitInfo",
        "ExecutedCommand",
        "ExecutionMode",
        "SessionConfig",
        "SessionOptions",
        "SessionEvent",
        "SessionObserver",
        "TimestampedEvent",
        "InMemorySessionManager",
        "SessionManager",
        "PersistedSession",
        "SessionCheckpoint",
        "StateSnapshot",
        "SessionProgress",
        "SessionState",
        "SessionSummary",
        "FileSessionStorage",
        "SessionStorage"
      ],
      "external_deps": []
    },
    "src/cook/workflow/executor.rs": {
      "path": "src/cook/workflow/executor.rs",
      "module_type": "Library",
      "imports": [
        "crate::cook::analysis::AnalysisCoordinator",
        "crate::cook::execution::ClaudeExecutor",
        "crate::cook::git_ops::git_command",
        "crate::cook::interaction::UserInteraction",
        "crate::cook::metrics::MetricsCoordinator",
        "crate::cook::orchestrator::ExecutionEnvironment",
        "crate::cook::session::{SessionManager, SessionUpdate}",
        "anyhow::{anyhow, Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::sync::Arc",
        "std::io::Write"
      ],
      "exports": [
        "WorkflowStep",
        "ExtendedWorkflowConfig",
        "WorkflowExecutor",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/execution/runner.rs": {
      "path": "src/cook/execution/runner.rs",
      "module_type": "Library",
      "imports": [
        "super::{CommandExecutor, ExecutionContext, ExecutionResult}",
        "crate::abstractions::exit_status::ExitStatusExt",
        "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
        "anyhow::{Context, Result}",
        "async_trait::async_trait",
        "super::*"
      ],
      "exports": [
        "CommandRunner",
        "RealCommandRunner",
        "new",
        "with_subprocess",
        "MockCommandRunner",
        "new",
        "add_response"
      ],
      "external_deps": []
    },
    "src/cook/session/tracker.rs": {
      "path": "src/cook/session/tracker.rs",
      "module_type": "Library",
      "imports": [
        "super::{SessionManager, SessionState, SessionStatus, SessionSummary, SessionUpdate}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path",
        "std::sync::Mutex",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf",
        "tempfile::TempDir"
      ],
      "exports": [
        "SessionTrackerImpl",
        "new",
        "set_worktree",
        "set_focus",
        "SessionTracker"
      ],
      "external_deps": []
    },
    "src/git/types.rs": {
      "path": "src/git/types.rs",
      "module_type": "Library",
      "imports": [
        "std::path::PathBuf"
      ],
      "exports": [
        "GitStatus",
        "new",
        "is_clean",
        "has_staged_changes",
        "has_unstaged_changes",
        "has_conflicts",
        "all_changed_files",
        "GitDiff",
        "new",
        "files_count",
        "is_empty",
        "FileDiff",
        "FileChangeType",
        "WorktreeInfo",
        "CommitId",
        "new",
        "hash",
        "short_hash",
        "is_valid",
        "GitRepoState"
      ],
      "external_deps": []
    },
    "src/cook/signal_handler.rs": {
      "path": "src/cook/signal_handler.rs",
      "module_type": "Library",
      "imports": [
        "crate::worktree::{InterruptionType, WorktreeManager}",
        "anyhow::Result",
        "chrono::Utc",
        "signal_hook::consts::{SIGINT, SIGTERM}",
        "signal_hook::iterator::Signals",
        "std::sync::Arc",
        "std::thread"
      ],
      "exports": [
        "setup_interrupt_handlers"
      ],
      "external_deps": []
    },
    "src/subprocess/claude.rs": {
      "path": "src/subprocess/claude.rs",
      "module_type": "Library",
      "imports": [
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::sync::Arc",
        "super::builder::ProcessCommandBuilder",
        "super::error::ProcessError",
        "super::runner::ProcessRunner"
      ],
      "exports": [
        "ClaudeRunner",
        "ClaudeRunnerImpl",
        "new"
      ],
      "external_deps": []
    },
    "tests/cook_tests.rs": {
      "path": "tests/cook_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::process::Command",
        "tempfile::TempDir",
        "mod::improve_command_tests {",
        "mmm::cook::command::CookCommand",
        "std::path::PathBuf",
        "mod::session_tests {",
        "mmm::cook::session::SessionSummary"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/simple_state/state.rs": {
      "path": "src/simple_state/state.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "chrono::Utc",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "super::types::{SessionRecord, State}"
      ],
      "exports": [
        "StateManager",
        "new",
        "with_root",
        "state",
        "state_mut",
        "save",
        "record_session",
        "get_history"
      ],
      "external_deps": []
    },
    "tests/context_integration.rs": {
      "path": "tests/context_integration.rs",
      "module_type": "Library",
      "imports": [
        "tempfile::TempDir",
        "mmm::metrics::storage::MetricsStorage",
        "mmm::metrics::ImprovementMetrics",
        "std::time::Duration"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/simple_state/mod.rs": {
      "path": "src/simple_state/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "anyhow::Result",
        "std::path::PathBuf"
      ],
      "exports": [
        "init",
        "CacheManager",
        "StateManager",
        "*"
      ],
      "external_deps": []
    },
    "tests/workflow_tests.rs": {
      "path": "tests/workflow_tests.rs",
      "module_type": "Library",
      "imports": [
        "mmm::config::{command::WorkflowCommand, workflow::WorkflowConfig}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/init/command.rs": {
      "path": "src/init/command.rs",
      "module_type": "Library",
      "imports": [
        "clap::Parser",
        "std::path::PathBuf"
      ],
      "exports": [
        "InitCommand"
      ],
      "external_deps": []
    },
    "src/config/command.rs": {
      "path": "src/config/command.rs",
      "module_type": "Library",
      "imports": [
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "CommandArg",
        "is_variable",
        "resolve",
        "parse",
        "Command",
        "CommandMetadata",
        "OutputDeclaration",
        "InputReference",
        "InputMethod",
        "WorkflowCommand",
        "SimpleCommand",
        "to_command",
        "new",
        "from_string",
        "with_arg",
        "with_option",
        "with_retries",
        "with_timeout",
        "with_continue_on_error",
        "with_env"
      ],
      "external_deps": []
    },
    "src/cook/interaction/display.rs": {
      "path": "src/cook/interaction/display.rs",
      "module_type": "Library",
      "imports": [
        "super::SpinnerHandle",
        "std::sync::{Arc, Mutex}",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "ProgressDisplay",
        "ProgressDisplayImpl",
        "new",
        "MockProgressDisplay",
        "new",
        "get_messages"
      ],
      "external_deps": []
    },
    "src/git/scenario.rs": {
      "path": "src/git/scenario.rs",
      "module_type": "Library",
      "imports": [
        "super::{error::GitError, types::*, GitOperations, GitReader, GitWorktree, GitWriter}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "GitScenarioMock",
        "GitScenario",
        "ScenarioResponse",
        "GitCommand",
        "new"
      ],
      "external_deps": []
    },
    "tests/cook_iteration_tests.rs": {
      "path": "tests/cook_iteration_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::Path",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/orchestrator.rs": {
      "path": "src/cook/orchestrator.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::git::GitOperations",
        "crate::config::workflow::WorkflowConfig",
        "crate::simple_state::StateManager",
        "crate::worktree::WorktreeManager",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::PathBuf",
        "std::sync::Arc",
        "super::analysis::AnalysisCoordinator",
        "super::command::CookCommand",
        "super::execution::{ClaudeExecutor, CommandExecutor}",
        "super::interaction::UserInteraction",
        "super::metrics::MetricsCoordinator",
        "super::session::{SessionManager, SessionStatus, SessionUpdate}",
        "super::workflow::{ExtendedWorkflowConfig, WorkflowExecutor, WorkflowStep}",
        "crate::config::command::WorkflowCommand",
        "mod::tests {",
        "super::*",
        "crate::cook::analysis::runner::AnalysisRunnerImpl",
        "crate::cook::execution::claude::ClaudeExecutorImpl",
        "crate::cook::execution::runner::tests::MockCommandRunner",
        "crate::cook::interaction::mocks::MockUserInteraction",
        "crate::cook::metrics::collector::MetricsCollectorImpl",
        "crate::cook::session::tracker::SessionTrackerImpl",
        "std::os::unix::process::ExitStatusExt",
        "std::path::Path",
        "tempfile::TempDir"
      ],
      "exports": [
        "CookConfig",
        "CookOrchestrator",
        "ExecutionEnvironment",
        "DefaultCookOrchestrator",
        "new"
      ],
      "external_deps": []
    },
    "src/subprocess/mod.rs": {
      "path": "src/subprocess/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "std::sync::Arc"
      ],
      "exports": [
        "SubprocessManager",
        "new",
        "production",
        "mock",
        "runner",
        "git",
        "claude",
        "ProcessCommandBuilder",
        "ClaudeRunner",
        "ProcessError",
        "GitRunner",
        "MockCommandConfig",
        "MockProcessRunner",
        "ProcessCommand",
        "ExitStatusHelper",
        "ProcessOutput",
        "ProcessRunner",
        "ProcessStream"
      ],
      "external_deps": []
    },
    "src/config/loader.rs": {
      "path": "src/config/loader.rs",
      "module_type": "Library",
      "imports": [
        "super::{Config, ProjectConfig, WorkflowConfig}",
        "anyhow::{anyhow, Context, Result}",
        "std::path::Path",
        "std::sync::{Arc, RwLock}",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "ConfigLoader",
        "get_config"
      ],
      "external_deps": []
    },
    "tests/command_parsing_tests.rs": {
      "path": "tests/command_parsing_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::collections::HashMap"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/config/command_parser.rs": {
      "path": "src/config/command_parser.rs",
      "module_type": "Library",
      "imports": [
        "super::command::{Command, CommandArg}",
        "anyhow::{anyhow, Result}",
        "once_cell::sync::Lazy",
        "mod::tests {",
        "super::*",
        "std::collections::HashMap"
      ],
      "exports": [
        "parse_command_string",
        "expand_variables"
      ],
      "external_deps": []
    },
    "src/metrics/mod.rs": {
      "path": "src/metrics/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "std::time::Duration",
        "super::*",
        "std::path::PathBuf",
        "std::sync::Arc"
      ],
      "exports": [
        "ImprovementMetrics",
        "new",
        "overall_score",
        "MetricsComparison",
        "MetricsAnalyzer",
        "MetricsData",
        "MetricsReporter",
        "create_disabled_registry",
        "create_context",
        "CollectorConfig",
        "CompositeMetricsCollector",
        "FileMetricsCollector",
        "MemoryMetricsCollector",
        "MetricsContext",
        "MetricsContextBuilder",
        "AggregateResult",
        "Aggregation",
        "MetricEvent",
        "MetricsCollector as MetricsCollectorTrait",
        "MetricsQuery",
        "MetricsReader",
        "MetricsResult",
        "Tags",
        "TimeRange",
        "MetricsConfig",
        "MetricsRegistry",
        "create_disabled_registry",
        "create_test_registry",
        "MetricsAssert",
        "MetricsCollector",
        "ComplexityCalculator",
        "MetricsHistory",
        "MetricsSnapshot",
        "MetricsTrends",
        "Trend",
        "PerformanceProfiler",
        "QualityAnalyzer",
        "MetricsStorage"
      ],
      "external_deps": []
    },
    "src/cook/session/migration.rs": {
      "path": "src/cook/session/migration.rs",
      "module_type": "Library",
      "imports": [
        "crate::session::{",
        "std::path::PathBuf",
        "std::sync::Arc",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/workflow_commit_verification_tests.rs": {
      "path": "tests/workflow_commit_verification_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "assert_cmd::Command",
        "predicates::prelude::*",
        "std::fs",
        "std::path::Path",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "Cargo.toml": {
      "path": "Cargo.toml",
      "module_type": "Config",
      "imports": [],
      "exports": [],
      "external_deps": [
        "clap",
        "serde",
        "serde_json",
        "serde_yaml",
        "tokio",
        "anyhow",
        "thiserror",
        "tracing",
        "log",
        "tracing-subscriber",
        "walkdir",
        "regex",
        "chrono",
        "toml",
        "directories",
        "notify",
        "tempfile",
        "gray_matter",
        "shell-words",
        "async-trait",
        "reqwest",
        "tera",
        "sha2",
        "petgraph",
        "uuid",
        "futures",
        "pest",
        "pest_derive",
        "glob",
        "whoami",
        "sys-info",
        "axum",
        "tower-http",
        "once_cell",
        "semver",
        "dirs",
        "rand",
        "atty",
        "md5",
        "syn",
        "signal-hook",
        "assert_cmd",
        "predicates"
      ]
    },
    "src/abstractions/git.rs": {
      "path": "src/abstractions/git.rs",
      "module_type": "Library",
      "imports": [
        "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "crate::abstractions::exit_status::ExitStatusExt",
        "mod::tests {",
        "super::*",
        "mod::real_git_tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "GitOperations",
        "RealGitOperations",
        "new",
        "with_subprocess",
        "MockGitOperations",
        "new"
      ],
      "external_deps": []
    },
    "src/cook/mod_tests.rs": {
      "path": "src/cook/mod_tests.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
        "anyhow::Result",
        "tempfile::TempDir",
        "mod::core_tests {",
        "super::*",
        "crate::worktree::WorktreeManager",
        "crate::context::ContextAnalyzer"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/session/events.rs": {
      "path": "src/session/events.rs",
      "module_type": "Library",
      "imports": [
        "super::{IterationChanges, SessionConfig, SessionId}",
        "async_trait::async_trait",
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf"
      ],
      "exports": [
        "SessionEvent",
        "description",
        "is_terminal",
        "TimestampedEvent",
        "new",
        "SessionObserver",
        "NoOpObserver",
        "LoggingObserver",
        "new"
      ],
      "external_deps": []
    },
    "tests/worktree_integration_tests.rs": {
      "path": "tests/worktree_integration_tests.rs",
      "module_type": "Library",
      "imports": [
        "mmm::subprocess::SubprocessManager",
        "mmm::worktree::WorktreeManager",
        "std::fs",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/cli_tests.rs": {
      "path": "tests/cli_tests.rs",
      "module_type": "Library",
      "imports": [
        "assert_cmd::Command",
        "predicates::prelude::*",
        "tempfile::TempDir",
        "mod::cook_dry_run_tests {",
        "super::*",
        "std::env",
        "mod::arg_parsing_tests {",
        "super::*"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/context/analyzer.rs": {
      "path": "src/context/analyzer.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::subprocess::SubprocessManager",
        "anyhow::Result",
        "std::path::Path",
        "std::time::Instant",
        "walkdir::WalkDir"
      ],
      "exports": [
        "ProjectAnalyzer",
        "new",
        "with_components",
        "get_cached"
      ],
      "external_deps": []
    },
    "src/session/tests.rs": {
      "path": "src/session/tests.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "async_trait::async_trait",
        "std::sync::atomic::{AtomicUsize, Ordering}",
        "std::sync::Arc",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/metrics_integration.rs": {
      "path": "tests/metrics_integration.rs",
      "module_type": "Library",
      "imports": [
        "mmm::context::{ContextAnalyzer, ProjectAnalyzer}",
        "mmm::metrics::{MetricsCollector, MetricsHistory}",
        "mmm::subprocess::SubprocessManager",
        "std::fs",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/simple_state/tests.rs": {
      "path": "src/simple_state/tests.rs",
      "module_type": "Library",
      "imports": [
        "mod::test {",
        "super::super::*",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/config/mod.rs": {
      "path": "src/config/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{anyhow, Result}",
        "directories::ProjectDirs",
        "serde::{Deserialize, Serialize}",
        "std::path::PathBuf",
        "mod::tests {",
        "super::*",
        "crate::config::command::{Command, WorkflowCommand}",
        "crate::config::command_parser::parse_command_string",
        "std::sync::Mutex",
        "crate::config::command_validator::CommandRegistry",
        "crate::config::command_parser::expand_variables",
        "std::collections::HashMap",
        "crate::config::command_validator::apply_command_defaults"
      ],
      "exports": [
        "get_global_mmm_dir",
        "Config",
        "GlobalConfig",
        "ProjectConfig",
        "PluginConfig",
        "new",
        "merge_env_vars",
        "get_claude_api_key",
        "get_auto_commit",
        "get_spec_dir",
        "Command",
        "CommandArg",
        "CommandMetadata",
        "InputMethod",
        "InputReference",
        "OutputDeclaration",
        "SimpleCommand",
        "WorkflowCommand",
        "expand_variables",
        "parse_command_string",
        "apply_command_defaults",
        "validate_command",
        "CommandRegistry",
        "DynamicCommandRegistry",
        "ConfigLoader",
        "WorkflowConfig"
      ],
      "external_deps": []
    },
    "src/metrics/events.rs": {
      "path": "src/metrics/events.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::time::Duration"
      ],
      "exports": [
        "Tags",
        "MetricEvent",
        "counter",
        "gauge",
        "timer",
        "custom",
        "name",
        "timestamp",
        "tags",
        "MetricsCollector",
        "TimeRange",
        "Aggregation",
        "MetricsQuery",
        "MetricsResult",
        "AggregateResult",
        "MetricsReader"
      ],
      "external_deps": []
    },
    "src/subprocess/error.rs": {
      "path": "src/subprocess/error.rs",
      "module_type": "Library",
      "imports": [
        "std::time::Duration"
      ],
      "exports": [
        "ProcessError"
      ],
      "external_deps": []
    },
    "src/subprocess/tests.rs": {
      "path": "src/subprocess/tests.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests {",
        "super::super::*",
        "std::time::Duration"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/analysis/mod.rs": {
      "path": "src/cook/analysis/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path"
      ],
      "exports": [
        "AnalysisCoordinator",
        "AnalysisCache",
        "AnalysisCacheImpl",
        "AnalysisRunner",
        "AnalysisRunnerImpl",
        "AnalysisMetadata",
        "AnalysisResult"
      ],
      "external_deps": []
    },
    "src/cook/git_ops.rs": {
      "path": "src/cook/git_ops.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{GitOperations, RealGitOperations}",
        "anyhow::Result",
        "once_cell::sync::Lazy",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir",
        "tokio::process::Command"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/git/error.rs": {
      "path": "src/git/error.rs",
      "module_type": "Library",
      "imports": [
        "std::path::PathBuf",
        "thiserror::Error"
      ],
      "exports": [
        "GitError",
        "is_recoverable",
        "is_transient"
      ],
      "external_deps": []
    },
    "src/simple_state/cache.rs": {
      "path": "src/simple_state/cache.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{de::DeserializeOwned, Serialize}",
        "std::fs",
        "std::path::PathBuf",
        "std::time::{Duration, SystemTime}"
      ],
      "exports": [
        "CacheManager",
        "new",
        "with_config",
        "get",
        "set",
        "remove",
        "clear",
        "cleanup",
        "exists"
      ],
      "external_deps": []
    },
    "tests/common/mod.rs": {
      "path": "tests/common/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "std::process::Command",
        "tempfile::TempDir",
        "std::path::Path"
      ],
      "exports": [
        "TestContextBuilder",
        "new",
        "with_git",
        "with_git_user",
        "with_mmm_dirs",
        "with_file",
        "build",
        "TestContext",
        "path",
        "create_file",
        "read_file",
        "file_exists",
        "git_command",
        "init_git_repo",
        "configure_git_user",
        "create_mmm_directories",
        "create_test_playbook",
        "assert_file_contains",
        "assert_file_not_contains",
        "assert_command_success",
        "parse_command_string"
      ],
      "external_deps": []
    }
  },
  "edges": [
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "assert_cmd::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "predicates::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_commit_verification_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "assert_cmd::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "predicates::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "mod::cook_dry_run_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "std::env",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "mod::arg_parsing_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/metrics_integration.rs",
      "to": "mmm::context::{ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "tests/metrics_integration.rs",
      "to": "mmm::metrics::{MetricsCollector, MetricsHistory}",
      "dep_type": "Import"
    },
    {
      "from": "tests/metrics_integration.rs",
      "to": "mmm::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "tests/metrics_integration.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/metrics_integration.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mod::improve_command_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mmm::cook::command::CookCommand",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mod::session_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mmm::cook::session::SessionSummary",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "mod::cook_error_recovery {",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_integration.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_integration.rs",
      "to": "mmm::metrics::storage::MetricsStorage",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_integration.rs",
      "to": "mmm::metrics::ImprovementMetrics",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_integration.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "tests/command_parsing_tests.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "mmm::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "mmm::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_tests.rs",
      "to": "mmm::config::{command::WorkflowCommand, workflow::WorkflowConfig}",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "mmm::context::{",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "mmm::context::size_manager::OptimizableForSize",
      "dep_type": "Import"
    },
    {
      "from": "tests/context_optimization_tests.rs",
      "to": "mmm::context::{",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "assert_cmd::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "predicates::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::env",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "tokio::time::{timeout, Duration}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/command.rs",
      "to": "clap::Parser",
      "dep_type": "Import"
    },
    {
      "from": "src/init/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::init::command::InitCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::io::{self, Write}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::init::command::InitCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/init/templates.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "super::{ComplexityCalculator, ImprovementMetrics, PerformanceProfiler, QualityAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "tokio::task",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/events.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "super::events::{",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "std::future::Future",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "tokio::sync::RwLock",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "rand::Rng",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/registry.rs",
      "to": "crate::metrics::backends::MemoryMetricsCollector",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "syn::{visit::Visit, Block, Expr}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/history.rs",
      "to": "super::ImprovementMetrics",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/history.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "super::backends::MemoryMetricsCollector",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "super::events::{MetricEvent, Tags}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "super::registry::{MetricsConfig, MetricsRegistry}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/testing.rs",
      "to": "tokio::time::sleep",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::time::{Duration, Instant}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::os::unix::fs::PermissionsExt",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "super::{ImprovementMetrics, MetricsHistory}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "super::events::{",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "tokio::io::AsyncWriteExt",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "tokio::sync::{Mutex, RwLock}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "crate::metrics::Tags",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/backends.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "super::events::{MetricEvent, Tags}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "super::registry::MetricsRegistry",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/context.rs",
      "to": "crate::metrics::{backends::MemoryMetricsCollector, registry::MetricsConfig}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "crate::metrics::MetricsSnapshot",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "super::test_coverage::TestCoverageMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/hybrid_coverage.rs",
      "to": "crate::context::test_coverage::FileCoverage",
      "dep_type": "Import"
    },
    {
      "from": "src/context/size_manager.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/size_manager.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/size_manager.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/context/size_manager.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/size_manager.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "self::dependencies::ArchitecturalLayer",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::collections::{HashMap, HashSet}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::collections::{HashMap, HashSet}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "crate::context::AnalysisResult",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "mod::submodule",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::cmp::Ordering",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::collections::{BinaryHeap, HashMap}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "serde::Deserialize",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "super::test_coverage::{",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "crate::subprocess::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "crate::context::dependencies::ArchitecturalLayer",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::error::Error",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command::CommandMetadata",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command_discovery::CommandFile",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command_validator::{ArgumentDef, ArgumentType, CommandDefinition, OptionDef}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "regex::Regex",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "std::time::SystemTime",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "directories::ProjectDirs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command::{Command, WorkflowCommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_parser::parse_command_string",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_validator::CommandRegistry",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_parser::expand_variables",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_validator::apply_command_defaults",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "super::command::{Command, CommandArg}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::time::SystemTime",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "super::command::{Command, CommandMetadata}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/workflow.rs",
      "to": "super::command::WorkflowCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/config/workflow.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "super::{Config, ProjectConfig, WorkflowConfig}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "anyhow::{anyhow, Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::sync::{Arc, RwLock}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_discovery::CommandDiscovery",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::{CommandDefinition, CommandRegistry as StaticCommandRegistry}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::metadata_parser::MetadataParser",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::ArgumentType",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::ArgumentType",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "crate::config::{Command, CommandArg}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "crate::worktree::{WorktreeState, WorktreeStatus}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "anyhow::{anyhow, Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "uuid::Uuid",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "super::{IterationInfo, WorktreeSession, WorktreeState, WorktreeStats, WorktreeStatus}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "mod::test_state",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/state.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/state.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "crate::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "super::builder::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "super::error::ProcessError",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/claude.rs",
      "to": "super::runner::ProcessRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/error.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "super::builder::ProcessCommandBuilder",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "super::error::ProcessError",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "super::runner::ProcessRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/git.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "futures::stream::Stream",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "std::pin::Pin",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "super::error::ProcessError",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "tokio::io::AsyncWriteExt",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/runner.rs",
      "to": "std::os::unix::process::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mock.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mock.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mock.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mock.rs",
      "to": "super::error::ProcessError",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/mock.rs",
      "to": "super::runner::{ExitStatus, ProcessCommand, ProcessOutput, ProcessRunner, ProcessStream}",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/tests.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/tests.rs",
      "to": "super::super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/tests.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/builder.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/builder.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/builder.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/subprocess/builder.rs",
      "to": "crate::subprocess::ProcessCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "super::{MetricsCoordinator, ProjectMetrics}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "crate::cook::execution::CommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "crate::cook::metrics::reporter::MetricsReporter",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "crate::metrics::MetricsCollector",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "crate::cook::execution::runner::tests::MockCommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/collector.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "super::ProjectMetrics",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/reporter.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/metrics/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "crate::context::AnalysisResult",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "chrono::{DateTime, Duration, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "crate::context::AnalysisMetadata",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "crate::context::{",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/cache.rs",
      "to": "std::collections::{BinaryHeap, HashMap}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "super::AnalysisCoordinator",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "crate::context::{AnalysisMetadata, AnalysisResult}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "crate::context::{ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "crate::cook::execution::CommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "crate::cook::execution::runner::tests::MockCommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "crate::cook::execution::ExecutionResult",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/runner.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/analysis/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "mod::mod_tests",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "crate::config::{workflow::WorkflowConfig, Config, ConfigLoader}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "crate::metrics::{MetricsCollector, MetricsHistory, MetricsStorage}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "crate::simple_state::StateManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "crate::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "anyhow::{anyhow, Context as _, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "git_ops::get_last_commit_message",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "retry::check_claude_cli",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "std::io::{self, Write}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "workflow::WorkflowExecutor",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "glob::glob",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "glob::glob",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "mod::cook_inline_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_old.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/command.rs",
      "to": "clap::Args",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "crate::abstractions::{GitOperations, RealGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "mod::core_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "crate::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod_tests.rs",
      "to": "crate::context::ContextAnalyzer",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "mod::mod_tests",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::abstractions::git::RealGitOperations",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::config::{workflow::WorkflowConfig, ConfigLoader}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::simple_state::StateManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "anyhow::{anyhow, Context as _, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "mod::cook_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "super::{CommandExecutor, CommandRunner, ExecutionContext, ExecutionResult}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/claude.rs",
      "to": "crate::cook::execution::runner::tests::MockCommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "super::{CommandExecutor, ExecutionContext, ExecutionResult}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/runner.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/execution/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/mod.rs",
      "to": "mod::executor",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::analysis::AnalysisCoordinator",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::execution::ClaudeExecutor",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::git_ops::git_command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::interaction::UserInteraction",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::metrics::MetricsCoordinator",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::orchestrator::ExecutionEnvironment",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "crate::cook::session::{SessionManager, SessionUpdate}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "anyhow::{anyhow, Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow/executor.rs",
      "to": "std::io::Write",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::cook_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::cook::command::CookCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::testing::{TestContext, TestFixtures}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::workflow_parsing_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::config::command::{InputMethod, WorkflowCommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::config::workflow::WorkflowConfig",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::retry_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::cook::retry::{format_subprocess_error, is_transient_error}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::git_ops_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::abstractions::{GitOperations, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::abstractions::git::GitOperations",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::config::workflow::WorkflowConfig",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::simple_state::StateManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::analysis::AnalysisCoordinator",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::command::CookCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::execution::{ClaudeExecutor, CommandExecutor}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::interaction::UserInteraction",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::metrics::MetricsCoordinator",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::session::{SessionManager, SessionStatus, SessionUpdate}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::workflow::{ExtendedWorkflowConfig, WorkflowExecutor, WorkflowStep}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::config::command::WorkflowCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::analysis::runner::AnalysisRunnerImpl",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::execution::claude::ClaudeExecutorImpl",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::execution::runner::tests::MockCommandRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::interaction::mocks::MockUserInteraction",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::metrics::collector::MetricsCollectorImpl",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "crate::cook::session::tracker::SessionTrackerImpl",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "std::os::unix::process::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/orchestrator.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "crate::worktree::{InterruptionType, WorktreeManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "signal_hook::consts::{SIGINT, SIGTERM}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "signal_hook::iterator::Signals",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/display.rs",
      "to": "super::SpinnerHandle",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/display.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/display.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/display.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/prompts.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/prompts.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/prompts.rs",
      "to": "std::io::{self, Write}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/prompts.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/prompts.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/interaction/mod.rs",
      "to": "std::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "crate::abstractions::{ClaudeClient, RealClaudeClient}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "tokio::time::sleep",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "mod::additional_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "crate::session::{",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/adapter.rs",
      "to": "super::{",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/state.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/state.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/state.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "crate::session::{",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/migration.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "super::{SessionManager, SessionState, SessionStatus, SessionSummary, SessionUpdate}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "std::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/tracker.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session/summary.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "clap::{CommandFactory, Parser, Subcommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "tracing::{debug, error, trace}",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "mmm::subprocess::SubprocessManager",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "mmm::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/mod.rs",
      "to": "command::AnalyzeCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "mod::command_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "crate::analyze::command",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/tests.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "crate::subprocess::{",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "tokio::time::sleep",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, SubprocessManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "mod::real_git_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "serde::{de::DeserializeOwned, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::time::{Duration, SystemTime}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/types.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/types.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "super::types::{SessionRecord, State}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "mod::test {",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "super::super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "src/git/parsers.rs",
      "to": "super::types::*",
      "dep_type": "Import"
    },
    {
      "from": "src/git/parsers.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/git/parsers.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/git/parsers.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/git/parsers.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/git/types.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/git/error.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/git/error.rs",
      "to": "thiserror::Error",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "crate::subprocess::{ProcessCommandBuilder, ProcessRunner}",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "crate::subprocess::MockProcessRunner",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/git/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "super::{error::GitError, types::*, GitOperations, GitReader, GitWorktree, GitWriter}",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/git/scenario.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "super::{IterationChanges, SessionConfig, SessionId}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/events.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/config.rs",
      "to": "crate::config::workflow::WorkflowConfig",
      "dep_type": "Import"
    },
    {
      "from": "src/session/config.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/config.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/config.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/config.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "super::{SessionConfig, SessionId, SessionState, TimestampedEvent}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "std::collections::HashSet",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/persistence.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "super::{",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "tokio::sync::RwLock",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "crate::session::IterationChanges",
      "dep_type": "Import"
    },
    {
      "from": "src/session/manager.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/mod.rs",
      "to": "std::fmt",
      "dep_type": "Import"
    },
    {
      "from": "src/session/mod.rs",
      "to": "uuid::Uuid",
      "dep_type": "Import"
    },
    {
      "from": "src/session/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "super::{CommitInfo, ExecutedCommand, IterationChanges}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "std::collections::HashSet",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/state.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/tests.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/session/tests.rs",
      "to": "std::sync::atomic::{AtomicUsize, Ordering}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/tests.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/session/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "super::{PersistedSession, SessionId}",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/session/storage.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    }
  ],
  "cycles": [],
  "layers": [
    {
      "name": "root",
      "level": 0,
      "modules": [
        "Cargo.toml"
      ]
    },
    {
      "name": "top-level",
      "level": 1,
      "modules": [
        "src/main.rs",
        "src/lib.rs",
        "tests/config_integration_tests.rs",
        "tests/subprocess_tests.rs",
        "tests/edge_case_tests.rs",
        "tests/integration_test_cook_path.rs",
        "tests/context_optimization_tests.rs",
        "tests/error_handling_tests.rs",
        "tests/cook_tests.rs",
        "tests/context_integration.rs",
        "tests/workflow_tests.rs",
        "tests/cook_iteration_tests.rs",
        "tests/command_parsing_tests.rs",
        "tests/workflow_commit_verification_tests.rs",
        "tests/worktree_integration_tests.rs",
        "tests/cli_tests.rs",
        "tests/metrics_integration.rs"
      ]
    },
    {
      "name": "module",
      "level": 2,
      "modules": [
        "src/metrics/registry.rs",
        "src/session/state.rs",
        "src/context/architecture.rs",
        "src/config/command_validator.rs",
        "src/worktree/mod.rs",
        "src/init/templates.rs",
        "src/subprocess/mock.rs",
        "src/metrics/quality.rs",
        "src/context/conventions.rs",
        "src/worktree/test_state.rs",
        "src/abstractions/claude.rs",
        "src/config/dynamic_registry.rs",
        "src/testing/mod.rs",
        "src/worktree/state.rs",
        "src/session/manager.rs",
        "src/metrics/collector.rs",
        "src/config/metadata_parser.rs",
        "src/cook/tests.rs",
        "src/metrics/performance.rs",
        "src/abstractions/mod.rs",
        "src/metrics/history.rs",
        "src/context/tarpaulin_coverage.rs",
        "src/analyze/mod.rs",
        "src/metrics/storage.rs",
        "src/metrics/complexity.rs",
        "src/metrics/context.rs",
        "src/config/workflow.rs",
        "src/context/dependencies.rs",
        "src/metrics/backends.rs",
        "src/init/mod.rs",
        "src/worktree/manager.rs",
        "src/subprocess/runner.rs",
        "src/abstractions/exit_status.rs",
        "src/session/persistence.rs",
        "src/analyze/tests.rs",
        "src/context/mod.rs",
        "src/metrics/testing.rs",
        "src/config/command_discovery.rs",
        "src/subprocess/builder.rs",
        "src/cook/mod_old.rs",
        "src/session/config.rs",
        "src/session/storage.rs",
        "src/simple_state/types.rs",
        "src/worktree/tests.rs",
        "src/context/size_manager.rs",
        "src/cook/mod.rs",
        "src/context/test_coverage.rs",
        "src/context/hybrid_coverage.rs",
        "src/context/debt.rs",
        "src/cook/command.rs",
        "src/git/parsers.rs",
        "src/analyze/command.rs",
        "src/git/mod.rs",
        "src/subprocess/git.rs",
        "src/cook/retry.rs",
        "src/session/mod.rs",
        "src/git/types.rs",
        "src/cook/signal_handler.rs",
        "src/subprocess/claude.rs",
        "src/simple_state/state.rs",
        "src/simple_state/mod.rs",
        "src/init/command.rs",
        "src/config/command.rs",
        "src/git/scenario.rs",
        "src/cook/orchestrator.rs",
        "src/subprocess/mod.rs",
        "src/config/loader.rs",
        "src/config/command_parser.rs",
        "src/metrics/mod.rs",
        "src/abstractions/git.rs",
        "src/cook/mod_tests.rs",
        "src/session/events.rs",
        "src/context/analyzer.rs",
        "src/session/tests.rs",
        "src/simple_state/tests.rs",
        "src/config/mod.rs",
        "src/metrics/events.rs",
        "src/subprocess/error.rs",
        "src/subprocess/tests.rs",
        "src/cook/git_ops.rs",
        "src/git/error.rs",
        "src/simple_state/cache.rs",
        "tests/common/mod.rs"
      ]
    },
    {
      "name": "deep",
      "level": 3,
      "modules": [
        "src/cook/metrics/mod.rs",
        "src/cook/analysis/cache.rs",
        "src/cook/interaction/mod.rs",
        "src/cook/session/state.rs",
        "src/cook/execution/claude.rs",
        "src/cook/execution/mod.rs",
        "src/cook/analysis/runner.rs",
        "src/cook/metrics/collector.rs",
        "src/cook/session/adapter.rs",
        "src/cook/metrics/reporter.rs",
        "src/cook/interaction/prompts.rs",
        "src/cook/session/mod.rs",
        "src/cook/session/summary.rs",
        "src/cook/workflow/mod.rs",
        "src/cook/workflow/executor.rs",
        "src/cook/execution/runner.rs",
        "src/cook/session/tracker.rs",
        "src/cook/interaction/display.rs",
        "src/cook/session/migration.rs",
        "src/cook/analysis/mod.rs"
      ]
    }
  ]
}