{
  "nodes": {
    "src/context/dependencies.rs": {
      "path": "src/context/dependencies.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::{HashMap, HashSet}",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "std::path::Path",
        "std::collections::{HashMap, HashSet}",
        "crate::context::AnalysisResult",
        "super::*",
        "mod::submodule"
      ],
      "exports": [
        "DependencyAnalyzer",
        "DependencyGraph",
        "ModuleNode",
        "ModuleType",
        "DependencyEdge",
        "DependencyType",
        "ArchitecturalLayer",
        "get_file_dependencies",
        "get_coupling_hotspots",
        "BasicDependencyAnalyzer",
        "new",
        "new(r\"pub\\s+use\\s+[^"
      ],
      "external_deps": []
    },
    "src/config/command_parser.rs": {
      "path": "src/config/command_parser.rs",
      "module_type": "Library",
      "imports": [
        "super::command::{Command, CommandArg}",
        "anyhow::{anyhow, Result}",
        "once_cell::sync::Lazy",
        "mod::tests {",
        "super::*",
        "std::collections::HashMap"
      ],
      "exports": [
        "parse_command_string",
        "expand_variables"
      ],
      "external_deps": []
    },
    "src/abstractions/mod.rs": {
      "path": "src/abstractions/mod.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [
        "ClaudeClient",
        "MockClaudeClient",
        "RealClaudeClient",
        "ExitStatusExt",
        "GitOperations",
        "MockGitOperations",
        "RealGitOperations"
      ],
      "external_deps": []
    },
    "src/testing/mod.rs": {
      "path": "src/testing/mod.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
        "anyhow::Result",
        "std::path::PathBuf",
        "tempfile::TempDir",
        "std::fs",
        "super::*",
        "std::fs",
        "std::path::Path",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "TestContext",
        "new",
        "with_mocks",
        "temp_path",
        "create_test_file",
        "MockGitBuilder",
        "new",
        "is_repo",
        "build",
        "MockClaudeBuilder",
        "new",
        "is_available",
        "build",
        "TestFixtures",
        "unavailable_claude",
        "setup_test_project",
        "create_test_file",
        "create_test_files",
        "TempDir"
      ],
      "external_deps": []
    },
    "src/metrics/storage.rs": {
      "path": "src/metrics/storage.rs",
      "module_type": "Library",
      "imports": [
        "super::{ImprovementMetrics, MetricsHistory}",
        "anyhow::{Context, Result}",
        "std::path::{Path, PathBuf}",
        "tracing::debug"
      ],
      "exports": [
        "MetricsStorage",
        "new",
        "ensure_directory",
        "save_current",
        "load_current",
        "save_history",
        "load_history",
        "generate_report",
        "save_report"
      ],
      "external_deps": []
    },
    "src/metrics/history.rs": {
      "path": "src/metrics/history.rs",
      "module_type": "Library",
      "imports": [
        "super::ImprovementMetrics",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "MetricsHistory",
        "new",
        "add_snapshot",
        "latest",
        "get_previous",
        "calculate_velocity",
        "MetricsSnapshot",
        "MetricsTrends",
        "Trend",
        "MetricsBaselines"
      ],
      "external_deps": []
    },
    "src/analyze/command.rs": {
      "path": "src/analyze/command.rs",
      "module_type": "Library",
      "imports": [
        "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
        "anyhow::{Context, Result}",
        "std::path::PathBuf"
      ],
      "exports": [
        "AnalyzeCommand"
      ],
      "external_deps": []
    },
    "src/abstractions/claude.rs": {
      "path": "src/abstractions/claude.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::collections::HashMap",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "std::time::Duration",
        "tokio::time::sleep",
        "crate::abstractions::exit_status::ExitStatusExt",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "ClaudeClient",
        "RealClaudeClient",
        "new",
        "MockClaudeClient",
        "new"
      ],
      "external_deps": []
    },
    "src/simple_state/mod.rs": {
      "path": "src/simple_state/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "anyhow::Result",
        "std::path::PathBuf"
      ],
      "exports": [
        "init",
        "CacheManager",
        "StateManager",
        "*"
      ],
      "external_deps": []
    },
    "src/init/templates.rs": {
      "path": "src/init/templates.rs",
      "module_type": "Library",
      "imports": [
        "std::collections::HashMap"
      ],
      "exports": [
        "CommandTemplate",
        "MMM_CODE_REVIEW",
        "MMM_IMPLEMENT_SPEC",
        "MMM_LINT",
        "MMM_PRODUCT_ENHANCE",
        "MMM_MERGE_WORKTREE",
        "MMM_CLEANUP_TECH_DEBT",
        "get_all_templates",
        "get_templates_by_names"
      ],
      "external_deps": []
    },
    "tests/cook_tests.rs": {
      "path": "tests/cook_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::process::Command",
        "tempfile::TempDir",
        "mod::improve_command_tests {",
        "mmm::cook::command::CookCommand",
        "std::path::PathBuf",
        "mod::session_tests {",
        "mmm::cook::session::SessionSummary"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/config/dynamic_registry.rs": {
      "path": "src/config/dynamic_registry.rs",
      "module_type": "Library",
      "imports": [
        "super::command::Command",
        "super::command_discovery::CommandDiscovery",
        "super::command_validator::{CommandDefinition, CommandRegistry as StaticCommandRegistry}",
        "super::metadata_parser::MetadataParser",
        "anyhow::{anyhow, Result}",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "super::command_validator::ArgumentType",
        "super::command_validator::ArgumentType",
        "mod::tests {",
        "super::*",
        "crate::config::{Command, CommandArg}",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "DynamicCommandRegistry",
        "get",
        "validate_command",
        "apply_defaults",
        "list_commands"
      ],
      "external_deps": []
    },
    "tests/subprocess_tests.rs": {
      "path": "tests/subprocess_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::process::Command",
        "tokio::time::{timeout, Duration}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/worktree/test_state.rs": {
      "path": "src/worktree/test_state.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::worktree::{WorktreeState, WorktreeStatus}",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/context/mod.rs": {
      "path": "src/context/mod.rs",
      "module_type": "Library",
      "imports": [
        "self::dependencies::ArchitecturalLayer",
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}"
      ],
      "exports": [
        "AnalysisResult",
        "ArchitectureInfo",
        "ComponentInfo",
        "ArchitectureViolation",
        "ViolationSeverity",
        "AnalysisMetadata",
        "FileContext",
        "FileConventions",
        "Suggestion",
        "SuggestionPriority",
        "SuggestionCategory",
        "ImpactLevel",
        "ContextAnalyzer",
        "load_analysis",
        "save_analysis",
        "ProjectAnalyzer",
        "ArchitectureExtractor",
        "ConventionDetector",
        "ProjectConventions",
        "DebtItem",
        "TechnicalDebtMap",
        "TechnicalDebtMapper",
        "DependencyAnalyzer",
        "DependencyGraph",
        "TestCoverageAnalyzer",
        "TestCoverageMap"
      ],
      "external_deps": []
    },
    "src/cook/workflow.rs": {
      "path": "src/cook/workflow.rs",
      "module_type": "Library",
      "imports": [
        "crate::config::{",
        "crate::cook::git_ops::{get_last_commit_message, git_command}",
        "crate::cook::retry::{check_claude_cli, execute_with_retry, format_subprocess_error}",
        "anyhow::{anyhow, Context as _, Result}",
        "std::collections::HashMap",
        "tokio::process::Command",
        "std::io::Write",
        "mod::tests {",
        "super::*",
        "crate::config::command::{Command, CommandMetadata, WorkflowCommand}",
        "std::collections::HashMap",
        "crate::config::command::WorkflowCommand",
        "std::fs",
        "tempfile::TempDir",
        "tempfile::TempDir",
        "tempfile::TempDir",
        "tempfile::TempDir",
        "tokio::process::Command as TokioCommand"
      ],
      "exports": [
        "WorkflowExecutor",
        "new_for_test",
        "set_variables"
      ],
      "external_deps": []
    },
    "src/metrics/performance.rs": {
      "path": "src/metrics/performance.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "std::process::Command",
        "std::time::{Duration, Instant}",
        "tracing::{debug, warn}",
        "std::os::unix::fs::PermissionsExt"
      ],
      "exports": [
        "PerformanceMetrics",
        "PerformanceProfiler",
        "new",
        "profile"
      ],
      "external_deps": []
    },
    "src/context/tarpaulin_coverage.rs": {
      "path": "src/context/tarpaulin_coverage.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::Deserialize",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "std::process::Command",
        "super::test_coverage::{",
        "mod::tests {",
        "super::*",
        "std::fs",
        "tempfile::TempDir"
      ],
      "exports": [
        "TarpaulinCoverageAnalyzer",
        "new",
        "example"
      ],
      "external_deps": []
    },
    "src/context/debt.rs": {
      "path": "src/context/debt.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::cmp::Ordering",
        "std::collections::{BinaryHeap, HashMap}",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*"
      ],
      "exports": [
        "TechnicalDebtMapper",
        "TechnicalDebtMap",
        "DebtItem",
        "DebtType",
        "ComplexityHotspot",
        "CodeBlock",
        "get_file_debt",
        "get_file_complexity",
        "get_priority_items",
        "BasicTechnicalDebtMapper",
        "new",
        "find_debt_comments",
        "calculate_complexity",
        "find_duplication"
      ],
      "external_deps": []
    },
    "src/context/test_coverage.rs": {
      "path": "src/context/test_coverage.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "TestCoverageAnalyzer",
        "TestCoverageMap",
        "FileCoverage",
        "UntestedFunction",
        "CriticalPath",
        "Criticality",
        "RiskLevel",
        "get_file_coverage",
        "get_critical_gaps",
        "BasicTestCoverageAnalyzer",
        "new",
        "extract_functions",
        "find_tested_functions",
        "calculate_overall_coverage",
        "identify_critical_paths",
        "is_test_file",
        "add",
        "multiply",
        "divide"
      ],
      "external_deps": []
    },
    "tests/command_parsing_tests.rs": {
      "path": "tests/command_parsing_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::collections::HashMap"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/retry.rs": {
      "path": "src/cook/retry.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{ClaudeClient, RealClaudeClient}",
        "anyhow::{Context, Result}",
        "once_cell::sync::Lazy",
        "std::sync::Arc",
        "std::time::Duration",
        "tokio::process::Command",
        "tokio::time::sleep",
        "mod::tests {",
        "super::*",
        "std::time::Instant"
      ],
      "exports": [
        "is_transient_error",
        "format_subprocess_error"
      ],
      "external_deps": []
    },
    "src/simple_state/tests.rs": {
      "path": "src/simple_state/tests.rs",
      "module_type": "Library",
      "imports": [
        "mod::test {",
        "super::super::*",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/context/architecture.rs": {
      "path": "src/context/architecture.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "crate::context::dependencies::ArchitecturalLayer",
        "anyhow::Result",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "crate::testing::test_helpers::*"
      ],
      "exports": [
        "ArchitectureExtractor",
        "BasicArchitectureExtractor",
        "new",
        "detect_components",
        "check_violations_graph",
        "authenticate"
      ],
      "external_deps": []
    },
    "Cargo.toml": {
      "path": "Cargo.toml",
      "module_type": "Config",
      "imports": [],
      "exports": [],
      "external_deps": [
        "clap",
        "serde",
        "serde_json",
        "serde_yaml",
        "tokio",
        "anyhow",
        "thiserror",
        "tracing",
        "log",
        "tracing-subscriber",
        "walkdir",
        "regex",
        "chrono",
        "toml",
        "directories",
        "notify",
        "tempfile",
        "gray_matter",
        "shell-words",
        "async-trait",
        "reqwest",
        "tera",
        "sha2",
        "petgraph",
        "uuid",
        "futures",
        "pest",
        "pest_derive",
        "glob",
        "whoami",
        "sys-info",
        "axum",
        "tower-http",
        "once_cell",
        "semver",
        "dirs",
        "rand",
        "atty",
        "md5",
        "syn",
        "signal-hook",
        "assert_cmd",
        "predicates"
      ]
    },
    "src/simple_state/cache.rs": {
      "path": "src/simple_state/cache.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{de::DeserializeOwned, Serialize}",
        "std::fs",
        "std::path::PathBuf",
        "std::time::{Duration, SystemTime}"
      ],
      "exports": [
        "CacheManager",
        "new",
        "with_config",
        "get",
        "set",
        "remove",
        "clear",
        "cleanup",
        "exists"
      ],
      "external_deps": []
    },
    "src/metrics/collector.rs": {
      "path": "src/metrics/collector.rs",
      "module_type": "Library",
      "imports": [
        "super::{ComplexityCalculator, ImprovementMetrics, PerformanceProfiler, QualityAnalyzer}",
        "anyhow::Result",
        "std::path::Path",
        "tokio::task",
        "tracing::{debug, info}"
      ],
      "exports": [
        "MetricsCollector",
        "new"
      ],
      "external_deps": []
    },
    "tests/edge_case_tests.rs": {
      "path": "tests/edge_case_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::PathBuf",
        "std::process::Command",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread",
        "std::thread",
        "std::time::Duration"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/simple_state/types.rs": {
      "path": "src/simple_state/types.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "State",
        "SessionRecord",
        "new",
        "new",
        "complete"
      ],
      "external_deps": []
    },
    "src/abstractions/exit_status.rs": {
      "path": "src/abstractions/exit_status.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [
        "ExitStatusExt",
        "ExitStatusExt"
      ],
      "external_deps": []
    },
    "tests/cli_tests.rs": {
      "path": "tests/cli_tests.rs",
      "module_type": "Library",
      "imports": [
        "assert_cmd::Command",
        "predicates::prelude::*",
        "tempfile::TempDir",
        "mod::cook_dry_run_tests {",
        "super::*",
        "std::env",
        "mod::arg_parsing_tests {",
        "super::*"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/git_ops.rs": {
      "path": "src/cook/git_ops.rs",
      "module_type": "Library",
      "imports": [
        "crate::abstractions::{GitOperations, RealGitOperations}",
        "anyhow::Result",
        "once_cell::sync::Lazy",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir",
        "tokio::process::Command"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/main.rs": {
      "path": "src/main.rs",
      "module_type": "Binary",
      "imports": [
        "clap::{CommandFactory, Parser, Subcommand}",
        "std::path::PathBuf",
        "tracing::{debug, error, trace}",
        "mmm::worktree::WorktreeManager"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/worktree/mod.rs": {
      "path": "src/worktree/mod.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "std::path::PathBuf",
        "mod::test_state",
        "mod::tests"
      ],
      "exports": [
        "WorktreeSession",
        "new",
        "WorktreeManager",
        "Checkpoint",
        "CommandType",
        "InterruptionType",
        "IterationInfo",
        "WorktreeState",
        "WorktreeStats",
        "WorktreeStatus"
      ],
      "external_deps": []
    },
    "src/worktree/manager.rs": {
      "path": "src/worktree/manager.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{anyhow, Context, Result}",
        "chrono::Utc",
        "std::fs",
        "std::path::PathBuf",
        "std::process::Command",
        "uuid::Uuid",
        "super::{IterationInfo, WorktreeSession, WorktreeState, WorktreeStats, WorktreeStatus}",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [
        "WorktreeManager",
        "new",
        "create_session",
        "update_session_state",
        "get_session_state",
        "list_sessions",
        "merge_session",
        "cleanup_session",
        "cleanup_all_sessions",
        "get_worktree_for_branch",
        "create_checkpoint",
        "update_checkpoint",
        "load_session_state",
        "restore_session",
        "list_interrupted_sessions",
        "mark_session_abandoned",
        "get_last_successful_command"
      ],
      "external_deps": []
    },
    "src/init/mod.rs": {
      "path": "src/init/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "std::process::Command",
        "crate::init::command::InitCommand",
        "std::io::{self, Write}",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/complexity.rs": {
      "path": "src/metrics/complexity.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "syn::{visit::Visit, Block, Expr}",
        "tracing::debug"
      ],
      "exports": [
        "ComplexityMetrics",
        "ComplexityCalculator",
        "new",
        "calculate"
      ],
      "external_deps": []
    },
    "src/cook/mod.rs": {
      "path": "src/cook/mod.rs",
      "module_type": "Library",
      "imports": [
        "mod::tests",
        "crate::config::{workflow::WorkflowConfig, Config, ConfigLoader}",
        "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
        "crate::metrics::{MetricsCollector, MetricsHistory, MetricsStorage}",
        "crate::simple_state::StateManager",
        "crate::worktree::WorktreeManager",
        "anyhow::{anyhow, Context as _, Result}",
        "chrono::Utc",
        "git_ops::get_last_commit_message",
        "retry::check_claude_cli",
        "std::io::{self, Write}",
        "std::path::{Path, PathBuf}",
        "std::sync::Arc",
        "tokio::process::Command",
        "tracing::{info, warn}",
        "workflow::WorkflowExecutor",
        "glob::glob",
        "glob::glob",
        "std::collections::HashMap",
        "mod::cook_inline_tests {",
        "super::*",
        "std::path::PathBuf",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/signal_handler.rs": {
      "path": "src/cook/signal_handler.rs",
      "module_type": "Library",
      "imports": [
        "crate::worktree::{InterruptionType, WorktreeManager}",
        "anyhow::Result",
        "chrono::Utc",
        "signal_hook::consts::{SIGINT, SIGTERM}",
        "signal_hook::iterator::Signals",
        "std::sync::Arc",
        "std::thread"
      ],
      "exports": [
        "setup_interrupt_handlers"
      ],
      "external_deps": []
    },
    "src/worktree/tests.rs": {
      "path": "src/worktree/tests.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/workflow_tests.rs": {
      "path": "tests/workflow_tests.rs",
      "module_type": "Library",
      "imports": [
        "mmm::config::{command::WorkflowCommand, workflow::WorkflowConfig}"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/integration_test_cook_path.rs": {
      "path": "tests/integration_test_cook_path.rs",
      "module_type": "Library",
      "imports": [
        "assert_cmd::prelude::*",
        "predicates::prelude::*",
        "std::fs",
        "std::process::Command",
        "tempfile::TempDir",
        "std::env"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/metrics/mod.rs": {
      "path": "src/metrics/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::Path",
        "std::time::Duration"
      ],
      "exports": [
        "ImprovementMetrics",
        "new",
        "overall_score",
        "MetricsComparison",
        "MetricsAnalyzer",
        "MetricsData",
        "MetricsReporter",
        "MetricsCollector",
        "ComplexityCalculator",
        "MetricsHistory",
        "MetricsSnapshot",
        "MetricsTrends",
        "Trend",
        "PerformanceProfiler",
        "QualityAnalyzer",
        "MetricsStorage"
      ],
      "external_deps": []
    },
    "src/context/analyzer.rs": {
      "path": "src/context/analyzer.rs",
      "module_type": "Library",
      "imports": [
        "super::*",
        "anyhow::Result",
        "std::path::Path",
        "std::time::Instant",
        "walkdir::WalkDir"
      ],
      "exports": [
        "ProjectAnalyzer",
        "new",
        "with_components",
        "get_cached"
      ],
      "external_deps": []
    },
    "tests/error_handling_tests.rs": {
      "path": "tests/error_handling_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::process::Command",
        "tempfile::TempDir",
        "std::sync::{Arc, Mutex}",
        "std::thread",
        "mod::cook_error_recovery {",
        "anyhow::{anyhow, Result}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/init/command.rs": {
      "path": "src/init/command.rs",
      "module_type": "Library",
      "imports": [
        "clap::Parser",
        "std::path::PathBuf"
      ],
      "exports": [
        "InitCommand"
      ],
      "external_deps": []
    },
    "src/config/metadata_parser.rs": {
      "path": "src/config/metadata_parser.rs",
      "module_type": "Library",
      "imports": [
        "super::command::CommandMetadata",
        "super::command_discovery::CommandFile",
        "super::command_validator::{ArgumentDef, ArgumentType, CommandDefinition, OptionDef}",
        "anyhow::{anyhow, Result}",
        "regex::Regex",
        "serde::{Deserialize, Serialize}",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf",
        "std::time::SystemTime"
      ],
      "exports": [
        "MetadataParser",
        "new",
        "parse_command_file",
        "create_minimal_definition"
      ],
      "external_deps": []
    },
    "src/cook/command.rs": {
      "path": "src/cook/command.rs",
      "module_type": "Library",
      "imports": [
        "clap::Args",
        "std::path::PathBuf"
      ],
      "exports": [
        "CookCommand"
      ],
      "external_deps": []
    },
    "src/cook/tests.rs": {
      "path": "src/cook/tests.rs",
      "module_type": "Library",
      "imports": [
        "mod::cook_tests {",
        "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
        "crate::cook::command::CookCommand",
        "crate::testing::{TestContext, TestFixtures}",
        "std::path::PathBuf",
        "mod::workflow_parsing_tests {",
        "crate::config::command::{InputMethod, WorkflowCommand}",
        "crate::config::workflow::WorkflowConfig",
        "mod::retry_tests {",
        "crate::cook::retry::{format_subprocess_error, is_transient_error}",
        "mod::git_ops_tests {",
        "crate::abstractions::{GitOperations, MockGitOperations}"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/config/command_validator.rs": {
      "path": "src/config/command_validator.rs",
      "module_type": "Library",
      "imports": [
        "super::command::{Command, CommandMetadata}",
        "anyhow::{anyhow, Result}",
        "once_cell::sync::Lazy",
        "std::collections::HashMap",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "CommandDefinition",
        "ArgumentDef",
        "OptionDef",
        "ArgumentType",
        "CommandRegistry",
        "new",
        "register",
        "get",
        "validate_command",
        "apply_defaults",
        "list_commands",
        "COMMAND_REGISTRY",
        "validate_command",
        "apply_command_defaults"
      ],
      "external_deps": []
    },
    "src/metrics/quality.rs": {
      "path": "src/metrics/quality.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "serde::{Deserialize, Serialize}",
        "std::path::Path",
        "std::process::Command",
        "tracing::debug"
      ],
      "exports": [
        "QualityMetrics",
        "QualityAnalyzer",
        "new",
        "analyze"
      ],
      "external_deps": []
    },
    "src/analyze/mod.rs": {
      "path": "src/analyze/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "command::AnalyzeCommand"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/cook/session.rs": {
      "path": "src/cook/session.rs",
      "module_type": "Library",
      "imports": [
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "SessionSummary"
      ],
      "external_deps": []
    },
    "src/config/loader.rs": {
      "path": "src/config/loader.rs",
      "module_type": "Library",
      "imports": [
        "super::{Config, ProjectConfig, WorkflowConfig}",
        "anyhow::{anyhow, Context, Result}",
        "std::path::Path",
        "std::sync::{Arc, RwLock}",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "std::path::PathBuf",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "ConfigLoader",
        "get_config"
      ],
      "external_deps": []
    },
    "src/config/mod.rs": {
      "path": "src/config/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{anyhow, Result}",
        "directories::ProjectDirs",
        "serde::{Deserialize, Serialize}",
        "std::path::PathBuf",
        "mod::tests {",
        "super::*",
        "crate::config::command::{Command, WorkflowCommand}",
        "crate::config::command_parser::parse_command_string",
        "std::sync::Mutex",
        "crate::config::command_validator::CommandRegistry",
        "crate::config::command_parser::expand_variables",
        "std::collections::HashMap",
        "crate::config::command_validator::apply_command_defaults"
      ],
      "exports": [
        "get_global_mmm_dir",
        "Config",
        "GlobalConfig",
        "ProjectConfig",
        "PluginConfig",
        "new",
        "merge_env_vars",
        "get_claude_api_key",
        "get_auto_commit",
        "get_spec_dir",
        "Command",
        "CommandArg",
        "CommandMetadata",
        "InputMethod",
        "InputReference",
        "OutputDeclaration",
        "SimpleCommand",
        "WorkflowCommand",
        "expand_variables",
        "parse_command_string",
        "apply_command_defaults",
        "validate_command",
        "CommandRegistry",
        "DynamicCommandRegistry",
        "ConfigLoader",
        "WorkflowConfig"
      ],
      "external_deps": []
    },
    "src/config/command_discovery.rs": {
      "path": "src/config/command_discovery.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "std::collections::HashMap",
        "std::path::PathBuf",
        "std::time::SystemTime",
        "tokio::fs",
        "mod::tests {",
        "super::*",
        "tempfile::TempDir",
        "tokio::fs"
      ],
      "exports": [
        "CommandDiscovery",
        "new",
        "needs_refresh",
        "clear_cache",
        "CommandFile"
      ],
      "external_deps": []
    },
    "src/config/command.rs": {
      "path": "src/config/command.rs",
      "module_type": "Library",
      "imports": [
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "CommandArg",
        "is_variable",
        "resolve",
        "parse",
        "Command",
        "CommandMetadata",
        "OutputDeclaration",
        "InputReference",
        "InputMethod",
        "WorkflowCommand",
        "SimpleCommand",
        "to_command",
        "new",
        "from_string",
        "with_arg",
        "with_option",
        "with_retries",
        "with_timeout",
        "with_continue_on_error",
        "with_env"
      ],
      "external_deps": []
    },
    "tests/worktree_integration_tests.rs": {
      "path": "tests/worktree_integration_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/simple_state/state.rs": {
      "path": "src/simple_state/state.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::{Context, Result}",
        "chrono::Utc",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "super::types::{SessionRecord, State}"
      ],
      "exports": [
        "StateManager",
        "new",
        "with_root",
        "state",
        "state_mut",
        "save",
        "record_session",
        "get_history"
      ],
      "external_deps": []
    },
    "src/context/conventions.rs": {
      "path": "src/context/conventions.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "serde::{Deserialize, Serialize}",
        "std::collections::HashMap",
        "std::path::{Path, PathBuf}",
        "walkdir::WalkDir",
        "mod::tests {",
        "super::*",
        "mod::tests {",
        "super::*",
        "std::fs",
        "tempfile::TempDir",
        "std::error::Error"
      ],
      "exports": [
        "ConventionDetector",
        "ProjectConventions",
        "NamingRules",
        "NamingStyle",
        "Pattern",
        "TestingConventions",
        "Idiom",
        "FileConventionInfo",
        "get_file_conventions",
        "get_naming_violations",
        "BasicConventionDetector",
        "new",
        "detect_naming_style",
        "detect_patterns",
        "extract_function_names",
        "extract_variable_names",
        "extract_type_names",
        "extract_constant_names",
        "or",
        "if",
        "detect_test_conventions",
        "get_user",
        "API_VERSION"
      ],
      "external_deps": []
    },
    "src/worktree/state.rs": {
      "path": "src/worktree/state.rs",
      "module_type": "Library",
      "imports": [
        "chrono::{DateTime, Utc}",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "WorktreeState",
        "WorktreeStatus",
        "IterationInfo",
        "WorktreeStats",
        "InterruptionType",
        "Checkpoint",
        "CommandType"
      ],
      "external_deps": []
    },
    "tests/cook_iteration_tests.rs": {
      "path": "tests/cook_iteration_tests.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::Path",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "tests/common/mod.rs": {
      "path": "tests/common/mod.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "std::fs",
        "std::path::{Path, PathBuf}",
        "std::process::Command",
        "tempfile::TempDir",
        "std::path::Path"
      ],
      "exports": [
        "TestContextBuilder",
        "new",
        "with_git",
        "with_git_user",
        "with_mmm_dirs",
        "with_file",
        "build",
        "TestContext",
        "path",
        "create_file",
        "read_file",
        "file_exists",
        "git_command",
        "init_git_repo",
        "configure_git_user",
        "create_mmm_directories",
        "create_test_playbook",
        "assert_file_contains",
        "assert_file_not_contains",
        "assert_command_success",
        "parse_command_string"
      ],
      "external_deps": []
    },
    "src/abstractions/git.rs": {
      "path": "src/abstractions/git.rs",
      "module_type": "Library",
      "imports": [
        "anyhow::Result",
        "async_trait::async_trait",
        "std::path::Path",
        "std::sync::Arc",
        "tokio::sync::Mutex",
        "crate::abstractions::exit_status::ExitStatusExt",
        "mod::tests {",
        "super::*"
      ],
      "exports": [
        "GitOperations",
        "RealGitOperations",
        "new",
        "MockGitOperations",
        "new"
      ],
      "external_deps": []
    },
    "tests/config_integration_tests.rs": {
      "path": "tests/config_integration_tests.rs",
      "module_type": "Library",
      "imports": [
        "std::fs",
        "std::process::Command",
        "tempfile::TempDir"
      ],
      "exports": [],
      "external_deps": []
    },
    "src/lib.rs": {
      "path": "src/lib.rs",
      "module_type": "Library",
      "imports": [],
      "exports": [],
      "external_deps": []
    },
    "src/config/workflow.rs": {
      "path": "src/config/workflow.rs",
      "module_type": "Library",
      "imports": [
        "super::command::WorkflowCommand",
        "serde::{Deserialize, Serialize}"
      ],
      "exports": [
        "WorkflowConfig"
      ],
      "external_deps": []
    }
  },
  "edges": [
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_iteration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "assert_cmd::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "predicates::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "mod::cook_dry_run_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "std::env",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "mod::arg_parsing_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cli_tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/config_integration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mod::improve_command_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mmm::cook::command::CookCommand",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mod::session_tests {",
      "dep_type": "Import"
    },
    {
      "from": "tests/cook_tests.rs",
      "to": "mmm::cook::session::SessionSummary",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "mod::cook_error_recovery {",
      "dep_type": "Import"
    },
    {
      "from": "tests/error_handling_tests.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/common/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "tests/command_parsing_tests.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/worktree_integration_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "tests/edge_case_tests.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "tests/workflow_tests.rs",
      "to": "mmm::config::{command::WorkflowCommand, workflow::WorkflowConfig}",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "assert_cmd::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "predicates::prelude::*",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "tests/integration_test_cook_path.rs",
      "to": "std::env",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "tests/subprocess_tests.rs",
      "to": "tokio::time::{timeout, Duration}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/command.rs",
      "to": "clap::Parser",
      "dep_type": "Import"
    },
    {
      "from": "src/init/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "crate::init::command::InitCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "std::io::{self, Write}",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/init/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/init/templates.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "super::{ComplexityCalculator, ImprovementMetrics, PerformanceProfiler, QualityAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "tokio::task",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/collector.rs",
      "to": "tracing::{debug, info}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "syn::{visit::Visit, Block, Expr}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/complexity.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/mod.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/history.rs",
      "to": "super::ImprovementMetrics",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/history.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/quality.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::time::{Duration, Instant}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "tracing::{debug, warn}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/performance.rs",
      "to": "std::os::unix::fs::PermissionsExt",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "super::{ImprovementMetrics, MetricsHistory}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/metrics/storage.rs",
      "to": "tracing::debug",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/context/analyzer.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/test_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "self::dependencies::ArchitecturalLayer",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::collections::{HashMap, HashSet}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "std::collections::{HashMap, HashSet}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "crate::context::AnalysisResult",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/dependencies.rs",
      "to": "mod::submodule",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::cmp::Ordering",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::collections::{BinaryHeap, HashMap}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/debt.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "serde::Deserialize",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "super::test_coverage::{",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/context/tarpaulin_coverage.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "crate::context::dependencies::ArchitecturalLayer",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/architecture.rs",
      "to": "crate::testing::test_helpers::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "walkdir::WalkDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/context/conventions.rs",
      "to": "std::error::Error",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command::CommandMetadata",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command_discovery::CommandFile",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::command_validator::{ArgumentDef, ArgumentType, CommandDefinition, OptionDef}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "regex::Regex",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/metadata_parser.rs",
      "to": "std::time::SystemTime",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "directories::ProjectDirs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command::{Command, WorkflowCommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_parser::parse_command_string",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_validator::CommandRegistry",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_parser::expand_variables",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/mod.rs",
      "to": "crate::config::command_validator::apply_command_defaults",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "super::command::{Command, CommandArg}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_parser.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "std::time::SystemTime",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_discovery.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "super::command::{Command, CommandMetadata}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/command_validator.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/workflow.rs",
      "to": "super::command::WorkflowCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/config/workflow.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "super::{Config, ProjectConfig, WorkflowConfig}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "anyhow::{anyhow, Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::sync::{Arc, RwLock}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/loader.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_discovery::CommandDiscovery",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::{CommandDefinition, CommandRegistry as StaticCommandRegistry}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::metadata_parser::MetadataParser",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "anyhow::{anyhow, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::ArgumentType",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::command_validator::ArgumentType",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "crate::config::{Command, CommandArg}",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/config/dynamic_registry.rs",
      "to": "tokio::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "crate::worktree::{WorktreeState, WorktreeStatus}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/test_state.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "anyhow::{anyhow, Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "uuid::Uuid",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "super::{IterationInfo, WorktreeSession, WorktreeState, WorktreeStats, WorktreeStatus}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/manager.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "mod::test_state",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/state.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/state.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "std::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/worktree/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/testing/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/session.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/command.rs",
      "to": "clap::Args",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "crate::abstractions::{GitOperations, RealGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/git_ops.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::config::{workflow::WorkflowConfig, Config, ConfigLoader}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::metrics::{MetricsCollector, MetricsHistory, MetricsStorage}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::simple_state::StateManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "crate::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "anyhow::{anyhow, Context as _, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "git_ops::get_last_commit_message",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "retry::check_claude_cli",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::io::{self, Write}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "tracing::{info, warn}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "workflow::WorkflowExecutor",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "glob::glob",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "glob::glob",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "mod::cook_inline_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/mod.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "crate::config::{",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "crate::cook::git_ops::{get_last_commit_message, git_command}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "crate::cook::retry::{check_claude_cli, execute_with_retry, format_subprocess_error}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "anyhow::{anyhow, Context as _, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "std::io::Write",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "crate::config::command::{Command, CommandMetadata, WorkflowCommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "crate::config::command::WorkflowCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/workflow.rs",
      "to": "tokio::process::Command as TokioCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::cook_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::abstractions::{ClaudeClient, GitOperations, MockClaudeClient, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::cook::command::CookCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::testing::{TestContext, TestFixtures}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::workflow_parsing_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::config::command::{InputMethod, WorkflowCommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::config::workflow::WorkflowConfig",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::retry_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::cook::retry::{format_subprocess_error, is_transient_error}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "mod::git_ops_tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/tests.rs",
      "to": "crate::abstractions::{GitOperations, MockGitOperations}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "crate::worktree::{InterruptionType, WorktreeManager}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "signal_hook::consts::{SIGINT, SIGTERM}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "signal_hook::iterator::Signals",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/signal_handler.rs",
      "to": "std::thread",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "crate::abstractions::{ClaudeClient, RealClaudeClient}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "once_cell::sync::Lazy",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "tokio::process::Command",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "tokio::time::sleep",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/cook/retry.rs",
      "to": "std::time::Instant",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "clap::{CommandFactory, Parser, Subcommand}",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "tracing::{debug, error, trace}",
      "dep_type": "Import"
    },
    {
      "from": "src/main.rs",
      "to": "mmm::worktree::WorktreeManager",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "crate::context::{save_analysis, ContextAnalyzer, ProjectAnalyzer}",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/command.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/analyze/mod.rs",
      "to": "command::AnalyzeCommand",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::collections::HashMap",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "std::time::Duration",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "tokio::time::sleep",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/claude.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "async_trait::async_trait",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "std::path::Path",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "std::sync::Arc",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "tokio::sync::Mutex",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "crate::abstractions::exit_status::ExitStatusExt",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "mod::tests {",
      "dep_type": "Import"
    },
    {
      "from": "src/abstractions/git.rs",
      "to": "super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "serde::{de::DeserializeOwned, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/cache.rs",
      "to": "std::time::{Duration, SystemTime}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/types.rs",
      "to": "chrono::{DateTime, Utc}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/types.rs",
      "to": "serde::{Deserialize, Serialize}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "mod::tests",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "anyhow::Result",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/mod.rs",
      "to": "std::path::PathBuf",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "anyhow::{Context, Result}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "chrono::Utc",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "std::fs",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "std::path::{Path, PathBuf}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/state.rs",
      "to": "super::types::{SessionRecord, State}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "mod::test {",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "super::super::*",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "tempfile::TempDir",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "std::sync::{Arc, Mutex}",
      "dep_type": "Import"
    },
    {
      "from": "src/simple_state/tests.rs",
      "to": "std::thread",
      "dep_type": "Import"
    }
  ],
  "cycles": [],
  "layers": [
    {
      "name": "root",
      "level": 0,
      "modules": [
        "Cargo.toml"
      ]
    },
    {
      "name": "top-level",
      "level": 1,
      "modules": [
        "tests/cli_tests.rs",
        "tests/worktree_integration_tests.rs",
        "tests/integration_test_cook_path.rs",
        "tests/error_handling_tests.rs",
        "tests/config_integration_tests.rs",
        "tests/workflow_tests.rs",
        "tests/cook_iteration_tests.rs",
        "src/lib.rs",
        "tests/subprocess_tests.rs",
        "tests/command_parsing_tests.rs",
        "tests/cook_tests.rs",
        "src/main.rs",
        "tests/edge_case_tests.rs"
      ]
    },
    {
      "name": "module",
      "level": 2,
      "modules": [
        "src/metrics/collector.rs",
        "src/metrics/complexity.rs",
        "src/metrics/performance.rs",
        "src/worktree/mod.rs",
        "src/config/loader.rs",
        "src/context/architecture.rs",
        "src/cook/git_ops.rs",
        "src/cook/mod.rs",
        "src/init/command.rs",
        "src/simple_state/mod.rs",
        "src/abstractions/mod.rs",
        "src/context/tarpaulin_coverage.rs",
        "src/worktree/test_state.rs",
        "src/metrics/history.rs",
        "src/testing/mod.rs",
        "src/config/command_discovery.rs",
        "src/cook/session.rs",
        "src/cook/retry.rs",
        "src/abstractions/git.rs",
        "src/simple_state/state.rs",
        "src/config/workflow.rs",
        "src/metrics/storage.rs",
        "src/analyze/mod.rs",
        "src/cook/signal_handler.rs",
        "src/context/analyzer.rs",
        "src/analyze/command.rs",
        "tests/common/mod.rs",
        "src/config/mod.rs",
        "src/cook/command.rs",
        "src/context/dependencies.rs",
        "src/config/command_parser.rs",
        "src/config/command_validator.rs",
        "src/init/mod.rs",
        "src/worktree/state.rs",
        "src/cook/workflow.rs",
        "src/init/templates.rs",
        "src/cook/tests.rs",
        "src/worktree/tests.rs",
        "src/config/dynamic_registry.rs",
        "src/metrics/mod.rs",
        "src/simple_state/tests.rs",
        "src/context/conventions.rs",
        "src/abstractions/claude.rs",
        "src/context/mod.rs",
        "src/context/test_coverage.rs",
        "src/config/metadata_parser.rs",
        "src/metrics/quality.rs",
        "src/context/debt.rs",
        "src/simple_state/cache.rs",
        "src/config/command.rs",
        "src/abstractions/exit_status.rs",
        "src/worktree/manager.rs",
        "src/simple_state/types.rs"
      ]
    }
  ]
}