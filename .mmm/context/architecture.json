{
  "patterns": [
    "Modular"
  ],
  "layers": [],
  "components": {
    "abstractions": {
      "name": "abstractions",
      "responsibility": "Module functionality",
      "interfaces": [],
      "dependencies": [
        "anyhow",
        "async_trait",
        "tokio",
        "tempfile"
      ]
    },
    "init": {
      "name": "init",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn fn"
      ],
      "dependencies": [
        "clap",
        "anyhow",
        "tempfile"
      ]
    },
    "cook": {
      "name": "cook",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn fn",
        "fn fn"
      ],
      "dependencies": [
        "anyhow",
        "async_trait",
        "tempfile",
        "chrono",
        "serde",
        "tokio",
        "clap",
        "once_cell",
        "signal_hook"
      ]
    },
    "metrics": {
      "name": "metrics",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct ImprovementMetrics",
        "fn new(iteration_id:",
        "fn overall_score(&self)",
        "fn update_health_score(&mut",
        "struct MetricsComparison",
        "struct ComplexitySummary",
        "struct FileComplexityStats",
        "struct ComplexityHotspot",
        "trait MetricsAnalyzer",
        "struct MetricsData",
        "trait MetricsReporter",
        "fn fn",
        "fn fn",
        "fn create_disabled_registry()",
        "fn create_context"
      ],
      "dependencies": [
        "anyhow",
        "tokio",
        "tempfile",
        "async_trait",
        "chrono",
        "serde",
        "rand",
        "syn",
        "tracing"
      ]
    },
    "testing": {
      "name": "testing",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct TestContext",
        "fn new()",
        "fn with_mocks",
        "fn temp_path(&self)",
        "fn create_test_file(&self,",
        "struct MockGitBuilder",
        "fn new()",
        "fn is_repo(mut",
        "fn fn",
        "fn fn",
        "fn build(self)",
        "struct MockClaudeBuilder",
        "fn new()",
        "fn is_available(mut",
        "fn fn",
        "fn fn",
        "fn build(self)",
        "struct TestFixtures",
        "fn fn",
        "fn fn",
        "fn fn",
        "fn fn",
        "fn unavailable_claude()",
        "fn setup_test_project(temp_dir:",
        "fn create_test_file(dir:",
        "fn create_test_files(dir:"
      ],
      "dependencies": [
        "anyhow",
        "async_trait",
        "tempfile",
        "chrono",
        "regex"
      ]
    },
    "analyze": {
      "name": "analyze",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn fn"
      ],
      "dependencies": [
        "anyhow",
        "tempfile",
        "command"
      ]
    },
    "context": {
      "name": "context",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct AnalysisResult",
        "struct ArchitectureInfo",
        "struct ComponentInfo",
        "struct ArchitectureViolation",
        "struct CriticalityDistribution",
        "struct AnalysisMetadata",
        "struct FileContext",
        "struct FileConventions",
        "struct Suggestion",
        "trait ContextAnalyzer:",
        "fn load_analysis(project_path:",
        "fn save_analysis(project_path:",
        "fn save_analysis_with_options",
        "fn save_analysis_with_commit",
        "fn save_test_coverage_summary(context_dir:"
      ],
      "dependencies": [
        "anyhow",
        "walkdir",
        "tempfile",
        "serde",
        "test_coverage"
      ]
    },
    "analysis": {
      "name": "analysis",
      "responsibility": "Module functionality",
      "interfaces": [],
      "dependencies": [
        "anyhow",
        "async_trait",
        "tempfile"
      ]
    },
    "worktree": {
      "name": "worktree",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct WorktreeSession",
        "fn new(name:"
      ],
      "dependencies": [
        "tempfile",
        "anyhow",
        "chrono",
        "uuid",
        "serde"
      ]
    },
    "simple_state": {
      "name": "simple_state",
      "responsibility": "Module functionality",
      "interfaces": [
        "fn init()"
      ],
      "dependencies": [
        "anyhow",
        "serde",
        "chrono",
        "tempfile"
      ]
    },
    "scoring": {
      "name": "scoring",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct ProjectHealthScore",
        "struct ScoreComponents",
        "fn from_metrics(metrics:",
        "fn from_context(analysis:",
        "fn get_improvement_suggestions(&self)",
        "fn calculate_technical_debt_score(debt_items:",
        "fn format_component(name:"
      ],
      "dependencies": [
        "chrono",
        "serde"
      ]
    },
    "git": {
      "name": "git",
      "responsibility": "Module functionality",
      "interfaces": [
        "trait GitReader:",
        "trait GitWriter:",
        "trait GitWorktree:",
        "trait GitOperations:",
        "struct GitCommandRunner",
        "fn new(process_runner:"
      ],
      "dependencies": [
        "anyhow",
        "thiserror",
        "async_trait",
        "tempfile",
        "tokio"
      ]
    },
    "config": {
      "name": "config",
      "responsibility": "Configuration management",
      "interfaces": [
        "fn get_global_mmm_dir()",
        "struct Config",
        "struct GlobalConfig",
        "struct ProjectConfig",
        "struct PluginConfig",
        "fn new()",
        "fn merge_env_vars(&mut",
        "fn get_claude_api_key(&self)",
        "fn get_auto_commit(&self)",
        "fn get_spec_dir(&self)"
      ],
      "dependencies": [
        "anyhow",
        "regex",
        "serde",
        "directories",
        "once_cell",
        "tokio",
        "tempfile"
      ]
    },
    "subprocess": {
      "name": "subprocess",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct SubprocessManager",
        "fn new(runner:",
        "fn production()",
        "fn mock()",
        "fn runner(&self)",
        "fn git(&self)",
        "fn claude(&self)"
      ],
      "dependencies": [
        "async_trait",
        "tempfile",
        "futures",
        "tokio"
      ]
    },
    "session": {
      "name": "session",
      "responsibility": "Module functionality",
      "interfaces": [
        "struct SessionId(String)",
        "fn new()",
        "fn from_string(id:",
        "fn as_str(&self)",
        "struct SessionInfo",
        "struct IterationChanges",
        "struct CommitInfo",
        "struct ExecutedCommand"
      ],
      "dependencies": [
        "async_trait",
        "chrono",
        "serde",
        "anyhow",
        "tokio",
        "uuid",
        "tempfile"
      ]
    }
  },
  "violations": [
    {
      "rule": "Components should expose interfaces",
      "location": "abstractions",
      "severity": "Low",
      "description": "abstractions has no public interfaces"
    },
    {
      "rule": "Components should expose interfaces",
      "location": "analysis",
      "severity": "Low",
      "description": "analysis has no public interfaces"
    }
  ]
}