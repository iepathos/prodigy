{
  "chapter_id": "advanced",
  "chapter_title": "Advanced Features",
  "chapter_file": "book/src/advanced.md",
  "drift_detected": false,
  "severity": "low",
  "quality_assessment": "Chapter accurately documents advanced features with correct syntax and comprehensive examples. All major issues from previous analysis have been resolved. Only minor improvements needed.",
  "issues": [
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Stream Capture Control",
      "description": "capture_streams documentation shows string values (\"stdout\", \"stderr\", \"both\") but implementation uses a CaptureStreams struct with boolean fields",
      "current_content": "capture_streams: \"stdout\"\ncapture_streams: \"stderr\"\ncapture_streams: \"both\"",
      "should_be": "Implementation uses CaptureStreams struct with stdout/stderr/exit_code/success/duration boolean fields, not simple string values",
      "fix_suggestion": "Verify the actual YAML syntax accepted - if strings are supported via deserialization, document both formats. If not, update examples to match struct-based configuration.",
      "source_reference": "src/cook/workflow/variables.rs:268-279 CaptureStreams struct"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Conditional Execution",
      "description": "Chapter doesn't mention that on_success and on_failure can use any WorkflowStepCommand, not just nested commands",
      "should_add": "Clarify that on_success/on_failure handlers support full WorkflowStepCommand syntax including goal_seek, foreach, validate, etc.",
      "fix_suggestion": "Add note that handlers can be any workflow step command type, with example showing advanced handler usage",
      "source_reference": "src/config/command.rs:329-331 on_success and on_failure fields"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Step Identification",
      "description": "Chapter shows step ID usage but doesn't explain all benefits or scoping rules",
      "should_add": "Explain that step IDs enable referencing specific step outputs, help with debugging in logs, and provide clearer workflow structure. Document ID scoping and uniqueness requirements.",
      "fix_suggestion": "Expand section to cover ID benefits beyond just output referencing, add example of ID in error messages and logs",
      "source_reference": "src/config/command.rs:306 id field documentation"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Output File Redirection",
      "description": "Chapter documents output_file but doesn't explain detailed behavior",
      "current_content": "output_file: \"test-results.txt\"",
      "should_add": "Clarify which streams are redirected (stdout only? both?), how it interacts with capture_output, and whether file is created in working directory or absolute path",
      "fix_suggestion": "Add explanation of output_file behavior: streams redirected, file location, interaction with capture",
      "source_reference": "src/config/command.rs:353-355 output_file field"
    }
  ],
  "positive_aspects": [
    "Accurate capture_format enumeration (string, number, json, lines, boolean)",
    "Correct output_file field documentation",
    "Accurate when/conditional execution syntax",
    "Comprehensive timeout documentation with correct semantics",
    "Correct on_failure configuration with max_attempts and fail_workflow fields",
    "Accurate validation configuration with all supported fields (shell, claude, commands, threshold, on_incomplete, result_file)",
    "Good coverage of on_incomplete handlers with proper field documentation (claude, shell, commands, max_attempts, fail_workflow, commit_required)",
    "Excellent nested conditionals examples showing real-world patterns",
    "Strong foreach documentation with all configuration options (foreach, parallel, continue_on_error, max_items)",
    "Accurate goal_seek configuration and behavior explanation",
    "Well-structured best practices section with practical examples",
    "Clear progression from simple to complex features",
    "Good use of YAML examples throughout",
    "All previously-documented non-existent features have been removed (on_exit_code, retry backoff, working_dir, auto_commit, handler, step_validate)",
    "Chapter now focuses on features that actually exist in the implementation"
  ],
  "improvement_suggestions": [
    "Add troubleshooting section for common conditional execution pitfalls",
    "Include performance considerations for nested conditionals",
    "Add example showing combination of multiple advanced features in one workflow",
    "Consider adding flowchart for conditional execution paths",
    "Add cross-references to related chapters (Variables, Error Handling)",
    "Include example of using step IDs in complex multi-step workflows",
    "Add note about variable interpolation in when conditions",
    "Consider adding section on debugging complex conditional workflows",
    "Clarify capture_streams syntax if string format is supported via deserialization",
    "Add more detail about output_file behavior and interactions"
  ],
  "metadata": {
    "analyzed_at": "2025-10-05",
    "feature_inventory": "Direct codebase analysis",
    "topics_covered": [
      "Conditional execution",
      "Output capture formats",
      "Nested conditionals",
      "Timeouts",
      "Step identification",
      "Validation",
      "Foreach iteration",
      "Goal seeking"
    ],
    "validation_focus": "Check advanced features match implementation"
  }
}
