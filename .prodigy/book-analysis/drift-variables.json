{
  "chapter_id": "variables",
  "chapter_title": "Variables and Interpolation",
  "chapter_file": "book/src/variables.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Good overall coverage with accurate information. Minor missing features and some incomplete sections around advanced git variables and system variables. The chapter correctly documents most variable types but is missing comprehensive documentation of git change tracking variables.",
  "issues": [
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Git Context Variables",
      "description": "Chapter incorrectly states step.commits and workflow.commits are arrays of commit objects",
      "current_content": "**Note**: These are arrays of commit data. Use in foreach loops or access individual commits with array indexing. Each commit object contains fields like hash, message, timestamp, etc.",
      "should_be": "**Note**: These are space-separated strings of commit hashes. Access as: ${step.commits} or ${workflow.commits}. Additional git variables track file changes and diff statistics.",
      "fix_suggestion": "Correct the data type from 'arrays of commit objects' to 'space-separated strings of commit hashes'. Remove misleading information about object fields.",
      "source_reference": "src/cook/workflow/executor/context.rs:84,119 - commits are joined with spaces"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Git Context Variables",
      "description": "Chapter only lists 2 git variables but implementation provides 16+ git-related variables",
      "should_add": "Missing git variables: step.files_added, step.files_modified, step.files_deleted, step.commit_count, step.insertions, step.deletions, workflow.files_added, workflow.files_modified, workflow.files_deleted, workflow.commit_count, workflow.insertions, workflow.deletions",
      "fix_suggestion": "Add comprehensive subsection documenting all git change tracking variables with examples showing how they're used for tracking code changes",
      "source_reference": "src/cook/workflow/executor/context.rs:56-135"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Standard Variables",
      "description": "Missing system and environment variables that are automatically available",
      "should_add": "System variables: ${PROJECT_ROOT}, ${WORKTREE}, ${git.branch}, ${git.commit}",
      "fix_suggestion": "Add 'System Variables' subsection listing PROJECT_ROOT (working directory), WORKTREE (worktree name if applicable), git.branch, and git.commit",
      "source_reference": "src/cook/workflow/executor/context.rs:355-372"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Output Variables - Legacy Variables",
      "description": "Chapter lists handler.output, test.output, goal_seek.output but doesn't explain when/how they're set or if they're still actively used",
      "current_content": "**Legacy/Specialized Output Variables:**\n- `${handler.output}` - Output from handler command (used in error handling)\n- `${test.output}` - Output from test command (used in validation)\n- `${goal_seek.output}` - Output from goal-seeking command",
      "should_be": "Either provide clear examples of when these variables are set and populated, or mark them as deprecated if custom capture is preferred",
      "fix_suggestion": "Add usage examples or deprecation notice. The best practice note on line 49 suggests custom capture is preferred, so consider marking these as deprecated.",
      "source_reference": "book/src/variables.md:44-47"
    },
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Variable Scope and Precedence",
      "description": "Scope restoration after child blocks could be explained more explicitly",
      "current_content": "Shows foreach creating child scope that shadows parent 'message', then accessing parent after foreach ends",
      "should_be": "Add explicit note: 'Child scopes are temporary. When a child block (foreach, map phase) completes, its local variables are discarded and the parent scope is automatically restored.'",
      "fix_suggestion": "Add clarifying sentence explaining that child scope variables don't persist after the block completes",
      "source_reference": "src/cook/workflow/variables.rs:422-427 - child() creates isolated scope"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Variable Availability by Phase",
      "description": "Table shows availability but doesn't explain error behavior when using variables in wrong phase",
      "should_add": "Clarify what happens when trying to use ${item} outside map phase or ${map.results} outside reduce phase",
      "fix_suggestion": "Add note below table: 'Using phase-specific variables outside their designated phase will result in interpolation errors or empty values.'",
      "source_reference": "src/cook/workflow/variables.rs:134-141 - get() returns Option<Value>"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Nested JSON Field Access",
      "description": "Chapter shows nested field access but doesn't document error handling for missing fields",
      "should_add": "Document behavior when accessing non-existent nested fields",
      "fix_suggestion": "Add note: 'Accessing non-existent fields (e.g., ${user.missing.field}) returns an error. Use defaults or validation to handle missing fields gracefully.'",
      "source_reference": "src/cook/workflow/variables.rs:543-578 - resolve_path returns Result with errors"
    }
  ],
  "positive_aspects": [
    "Excellent organization by variable category and phase availability",
    "Clear table showing variable availability across workflow phases",
    "Comprehensive coverage of capture formats with working examples",
    "Good explanation of capture streams with accurate defaults",
    "Accurate documentation of variable interpolation syntax",
    "Well-explained scope and precedence model with examples",
    "Practical examples throughout the chapter",
    "Correct documentation of legacy aliases for backward compatibility",
    "Good note about shell.output vs shell.stdout matching implementation",
    "Best practice guidance preferring custom capture over automatic variables"
  ],
  "improvement_suggestions": [
    "Expand git context variables section with complete list of all 16+ variables",
    "Add system/environment variables section (PROJECT_ROOT, WORKTREE, git.branch, git.commit)",
    "Correct the git commits data type from 'array of objects' to 'space-separated strings'",
    "Add comprehensive examples for git change tracking variables",
    "Clarify or deprecate legacy output variables (handler.output, test.output, goal_seek.output)",
    "Add troubleshooting section for common variable interpolation errors",
    "Include cross-references to MapReduce, Commands, and Foreach chapters",
    "Add examples showing variable usage in different workflow phases",
    "Document error behavior for phase-mismatched variables",
    "Add performance note about variable resolution and caching"
  ],
  "metadata": {
    "analyzed_at": "2025-10-10",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Standard variables",
      "Output variables",
      "MapReduce variables",
      "Custom capture",
      "Capture formats",
      "Capture streams",
      "Variable scope",
      "Git context variables (partial)",
      "Validation variables",
      "Merge variables",
      "Legacy aliases"
    ],
    "validation_focus": "Check all variable types and interpolation syntax"
  }
}
