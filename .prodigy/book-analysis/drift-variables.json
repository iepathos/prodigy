{
  "chapter_id": "variables",
  "chapter_title": "Variables and Interpolation",
  "chapter_file": "book/src/variables.md",
  "drift_detected": true,
  "severity": "low",
  "quality_assessment": "Chapter is comprehensive and accurate with only minor documentation gaps",
  "issues": [
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Output Variables",
      "description": "Chapter doesn't document all automatic output variables that exist in implementation",
      "should_add": "Document legacy/specialized output variables: handler.output, test.output, goal_seek.output",
      "fix_suggestion": "Add note that these are legacy variables mainly used in internal error handling contexts. Already partially documented in lines 44-47 but could be more explicit about when they're set",
      "source_reference": "src/cook/common_strings.rs:28-48 documents SHELL_OUTPUT and CLAUDE_OUTPUT as the primary variables"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Standard Variables",
      "description": "Git context variables (step.commits, workflow.commits) are documented but could use more detail",
      "should_add": "Provide example of commit object structure and how to access individual commit fields",
      "fix_suggestion": "Add example showing commit object structure: {hash, message, timestamp, author, etc.} and how to use in templates",
      "source_reference": "src/cook/commit_tracker.rs - commit tracking implementation"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Standard Variables",
      "description": "step.files_changed and workflow.files_changed are documented but no usage examples provided",
      "should_add": "Add practical example of how these variables are formatted and typical use cases",
      "fix_suggestion": "Show example: 'Files changed: ${workflow.files_changed}' and mention these are arrays/lists of file paths",
      "source_reference": "src/unified_session/state.rs - files_changed tracking"
    },
    {
      "type": "unclear_content",
      "severity": "low",
      "section": "Variable Availability by Phase",
      "description": "Table shows when variables are available but doesn't explain what happens if you try to use them in wrong phase",
      "should_add": "Clarify error behavior when accessing phase-specific variables in wrong context",
      "fix_suggestion": "Add note: 'Attempting to use phase-specific variables outside their context will result in interpolation error or empty value'",
      "source_reference": "src/cook/workflow/variables.rs:134-141 - variable lookup returns Option"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Custom Variable Capture",
      "description": "CaptureStreams feature is well documented but could mention relationship to legacy output variables",
      "should_add": "Clarify that capture: with custom names replaces the need for legacy ${shell.output} pattern",
      "fix_suggestion": "Add best practice note: 'Custom capture variables (capture:) are preferred over automatic output variables (${shell.output}, ${claude.output}) for better code clarity'",
      "source_reference": "book/src/variables.md:49 already mentions this as best practice, could be more prominent"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Nested JSON Field Access",
      "description": "Chapter shows nested field access but doesn't document limits or error handling",
      "should_add": "Document what happens when accessing non-existent nested fields",
      "fix_suggestion": "Add note about error behavior: 'Accessing non-existent fields returns an error. Use default values or validation to handle missing fields gracefully'",
      "source_reference": "src/cook/workflow/variables.rs:556-574 - resolve_path returns Result with errors for missing fields"
    }
  ],
  "positive_aspects": [
    "Excellent phase-based availability table makes it clear when variables can be used",
    "Clear distinction between built-in variables and custom captured variables",
    "Comprehensive coverage of all capture formats (string, number, boolean, json, lines)",
    "Good examples for each capture format showing both YAML and expected output",
    "Well-documented variable scope and precedence with clear examples",
    "Legacy variable aliases properly documented with migration guidance",
    "Capture streams feature thoroughly explained with defaults clearly stated",
    "Best practice guidance about preferring custom capture over automatic output variables"
  ],
  "improvement_suggestions": [
    "Add troubleshooting section for common variable-related errors",
    "Include example of debugging variable values (e.g., shell: echo '${var}' to inspect)",
    "Add performance note about variable interpolation in tight loops",
    "Show example of using variables in conditional expressions (when:)",
    "Add cross-references to chapters that use variables heavily (commands, foreach, mapreduce)",
    "Consider adding 'Common Patterns' section showing typical variable workflows"
  ],
  "metadata": {
    "analyzed_at": "2025-10-05",
    "feature_inventory": "Direct source code analysis (features.json not available)",
    "topics_covered": [
      "Standard variables",
      "Output variables",
      "MapReduce variables",
      "Custom capture",
      "Capture formats",
      "Capture streams",
      "Variable scope",
      "Legacy aliases"
    ],
    "validation_focus": "Check all variable types and interpolation syntax"
  }
}
