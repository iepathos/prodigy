{
  "chapter_id": "examples",
  "chapter_title": "Examples",
  "chapter_file": "book/src/examples.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter shows good variety of examples but has some outdated syntax and missing modern features. Most examples are valid but could benefit from updates to reflect current best practices.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "low",
      "section": "Example 3: Foreach Iteration",
      "description": "Example uses 'commands' field in foreach, which is valid but not the recommended modern syntax",
      "current_content": "foreach:\n  - ...\ncommands:\n  - shell: ...",
      "should_be": "foreach:\n  - ...\ndo:\n  - shell: ...",
      "fix_suggestion": "Update foreach syntax to use 'do:' instead of 'commands:' to match current WorkflowStepCommand expectations",
      "source_reference": "src/config/command.rs:190-211 (ForeachConfig with 'do_block' field)"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 4: Parallel Code Review",
      "description": "Example uses deprecated 'capture' field instead of modern capture syntax",
      "current_content": "- claude: \"/review-file ${item.path}\"\n  id: \"review\"\n  capture: \"review_result\"\n  capture_format: \"json\"",
      "should_be": "- claude: \"/review-file ${item.path}\"\n  id: \"review\"\n  capture_output: \"review_result\"\n  capture_format: \"json\"",
      "fix_suggestion": "Update to use 'capture_output' field which is the current implementation in WorkflowStepCommand",
      "source_reference": "src/config/command.rs:367-368 (capture_output field in WorkflowStepCommand)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Example 6: Multi-Step Validation",
      "description": "Validation example doesn't show all available validation options",
      "should_add": "Show that validation supports both single command and multi-command formats (commands array)",
      "fix_suggestion": "Add a note or alternative example showing 'commands:' array format for multi-step validation",
      "source_reference": "src/cook/workflow/validation.rs:12-42 (ValidationConfig with commands, shell, claude options)"
    },
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Example 7: Environment-Aware Workflow",
      "description": "Environment example shows incorrect 'profiles' structure that doesn't match current implementation",
      "current_content": "profiles:\n  production:\n    API_URL: https://api.production.com\n    LOG_LEVEL: error\n    description: \"Production environment\"",
      "should_be": "profiles:\n  production:\n    env:\n      API_URL: https://api.production.com\n      LOG_LEVEL: error\n    description: \"Production environment\"",
      "fix_suggestion": "Update profiles syntax to use nested 'env' field as per EnvProfile struct. Also update secrets syntax to match current SecretValue implementation with provider and key fields",
      "source_reference": "src/cook/environment.rs (EnvProfile and SecretValue structs)"
    },
    {
      "type": "incorrect_example",
      "severity": "high",
      "section": "Example 7: Secrets Syntax",
      "description": "Secrets example shows incorrect syntax - should use provider and key fields",
      "current_content": "secrets:\n  API_KEY:\n    provider: env\n    key: SECRET_API_KEY",
      "should_be": "secrets:\n  API_KEY:\n    value: \"${SECRET_API_KEY}\"\n    secret: true\n\nor\n\nsecrets:\n  API_KEY: \"${SECRET_API_KEY}\"",
      "fix_suggestion": "Update secrets to match SecretValue enum - either simple string or object with 'value' and 'secret' fields",
      "source_reference": "src/cook/environment.rs:SecretValue enum"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Example 7: Environment-Aware Workflow",
      "description": "Example shows 'env_files' as array but doesn't clarify these should be PathBuf types",
      "current_content": "env_files:\n  - .env\n  - .env.production",
      "should_be": "Same syntax is correct, but should add note about path resolution",
      "fix_suggestion": "Add a note that env_files paths are relative to workflow file location",
      "source_reference": "src/config/mapreduce.rs:33-34 (env_files: Option<Vec<PathBuf>>)"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 7: Step-Level Environment Override",
      "description": "Example shows incorrect shell syntax for step-level environment override",
      "current_content": "- shell: \"LOG_LEVEL=debug ./deploy.sh\"",
      "should_be": "- shell: \"./deploy.sh\"\n  env:\n    LOG_LEVEL: debug",
      "fix_suggestion": "Use step-level 'env:' field instead of shell prefix for environment variable overrides to ensure proper tracking and masking",
      "source_reference": "src/config/command.rs:143-145 (CommandMetadata::env field)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Example 2: Coverage Improvement with Goal Seeking",
      "description": "Goal seek example doesn't show that both 'claude' and 'shell' options are available",
      "current_content": "goal_seek:\n  goal: \"...\"\n  claude: \"/improve-coverage\"\n  validate: |",
      "should_add": "Note that goal_seek supports either 'claude' or 'shell' commands for refinement",
      "fix_suggestion": "Add a comment or alternative showing 'shell' option for goal_seek refinement command",
      "source_reference": "src/cook/goal_seek/mod.rs:15-35 (GoalSeekConfig with both claude and shell fields)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Example 8: Complex MapReduce with Error Handling",
      "description": "Error policy example doesn't show all available error collection strategies",
      "current_content": "error_policy:\n  on_item_failure: dlq\n  continue_on_failure: true\n  max_failures: 5\n  failure_threshold: 0.3",
      "should_add": "Document error_collection field with options: aggregate, immediate, batched:{size}",
      "fix_suggestion": "Add 'error_collection: aggregate' to example and explain available strategies",
      "source_reference": "src/config/mapreduce.rs:75-77 (error_collection field) and ErrorCollectionStrategy enum"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Missing example",
      "description": "No example showing write_file command which is available in WorkflowStepCommand",
      "should_add": "Add example showing write_file command with path, content, format (text/json/yaml), mode, and create_dirs options",
      "fix_suggestion": "Add Example 9 showing write_file usage for generating configuration files or reports",
      "source_reference": "src/config/command.rs:279-318 (WriteFileConfig and WriteFileFormat)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Missing example",
      "description": "No example showing timeout configuration at step level",
      "should_add": "Show that individual steps can have 'timeout: <seconds>' field",
      "fix_suggestion": "Add timeout field to one of the existing examples with explanation",
      "source_reference": "src/config/command.rs:382-384 (timeout field in WorkflowStepCommand)"
    }
  ],
  "positive_aspects": [
    "Good variety of examples covering different use cases",
    "Progressive complexity from simple to advanced",
    "Examples are well-commented and show practical scenarios",
    "Coverage of both simple workflows and MapReduce patterns",
    "Good use of variable interpolation throughout",
    "Example 5 correctly shows capture_format options (string, json, lines, number, boolean)",
    "Example 3 shows both sequential and parallel foreach patterns",
    "Example 8 demonstrates comprehensive MapReduce with filtering, sorting, and error handling",
    "Example 1 shows basic on_failure pattern correctly",
    "Example 2 demonstrates goal_seek with proper threshold validation"
  ],
  "improvement_suggestions": [
    "Update foreach syntax in Example 3 to use modern 'do:' field instead of 'commands:'",
    "Fix capture field in Example 4 to use 'capture_output' as per current implementation",
    "Correct environment profiles syntax in Example 7 to use nested 'env' field",
    "Fix secrets syntax in Example 7 to match SecretValue implementation",
    "Update step-level environment override to use 'env:' field instead of shell prefix",
    "Add example for write_file command",
    "Add example showing step-level timeout configuration",
    "Clarify validation multi-command support in Example 6",
    "Show error_collection strategies in Example 8",
    "Add note about goal_seek supporting both claude and shell commands",
    "Consider adding example showing on_success chaining",
    "Add example demonstrating capture_streams options (stdout, stderr, both)",
    "Add note about env_files path resolution"
  ],
  "metadata": {
    "analyzed_at": "2025-10-10",
    "feature_inventory": "Analyzed directly from codebase (features.json not provided)",
    "topics_covered": [
      "Simple build and test workflows",
      "Goal seeking for iterative improvement",
      "Foreach iteration (sequential and parallel)",
      "MapReduce parallel code review",
      "Conditional deployment with when clauses",
      "Multi-step validation",
      "Environment-aware workflows with profiles",
      "Complex MapReduce with error handling"
    ],
    "validation_focus": "Check examples are valid and work with current syntax",
    "examples_count": 8,
    "syntax_errors": [
      "Example 3: foreach 'commands' should be 'do'",
      "Example 4: 'capture' should be 'capture_output'",
      "Example 7: profiles structure incorrect",
      "Example 7: secrets syntax incorrect",
      "Example 7: step-level env override using shell prefix instead of env field"
    ],
    "missing_features_to_demonstrate": [
      "write_file command",
      "timeout configuration",
      "error_collection strategies",
      "capture_streams options",
      "on_success chaining"
    ]
  }
}
