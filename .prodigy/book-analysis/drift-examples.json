{
  "chapter_id": "examples",
  "chapter_title": "Examples",
  "chapter_file": "book/src/examples.md",
  "drift_detected": true,
  "severity": "medium",
  "quality_assessment": "Chapter has excellent practical examples with good coverage of features, but contains some syntax issues in Example 7 (environment configuration) and Example 10 (unverified advanced features). Most examples are syntactically correct and follow current best practices.",
  "issues": [
    {
      "type": "outdated_information",
      "severity": "high",
      "section": "Example 7: Environment-Aware Workflow",
      "description": "Example shows 'secrets' as a separate top-level object with nested structure, but actual implementation expects secrets to use SecretValue enum (Simple string or Provider object)",
      "current_content": "secrets:\n  API_KEY:\n    value: \"${SECRET_API_KEY}\"\n    secret: true",
      "should_be": "secrets:\n  API_KEY: \"${SECRET_API_KEY}\"  # Simple format\n  # OR\n  API_KEY:\n    provider: env\n    key: SECRET_API_KEY",
      "fix_suggestion": "Update Example 7 to show correct SecretValue structure. The 'secret: true' field doesn't exist - secrets are automatically masked. Use either Simple(String) or Provider{provider, key, version} format.",
      "source_reference": "src/cook/environment/config.rs:86-96 (SecretValue enum)"
    },
    {
      "type": "missing_content",
      "severity": "high",
      "section": "Example 7: Environment-Aware Workflow",
      "description": "Example shows 'description' field in profiles but EnvProfile struct doesn't have this field",
      "current_content": "profiles:\n  production:\n    env:\n      API_URL: https://api.production.com\n      LOG_LEVEL: error",
      "should_be": "profiles:\n  production:\n    API_URL: https://api.production.com\n    LOG_LEVEL: error",
      "fix_suggestion": "EnvProfile uses #[serde(flatten)] so env vars go directly under the profile name, not nested under 'env'. Remove the nested 'env' key.",
      "source_reference": "src/cook/environment/config.rs:116-124 (EnvProfile struct with #[serde(flatten)])"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 10: Advanced Features",
      "description": "Example shows 'cwd' field for working directory, but WorkflowStepCommand doesn't have this field",
      "current_content": "- shell: \"npm install\"\n  cwd: \"frontend/\"",
      "should_be": "Verify if working_dir or similar field exists, or remove this example",
      "fix_suggestion": "Check WorkflowStepCommand implementation for working directory support. If not implemented, mark as future feature or remove.",
      "source_reference": "src/config/command.rs:320-401 (WorkflowStepCommand - no cwd/working_dir field found)"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 10: Advanced Features",
      "description": "Example shows git context variables like ${step.commit.files_modified} but this feature is not verified in the codebase",
      "current_content": "- shell: \"echo 'Modified files: ${step.commit.files_modified}'\"",
      "should_verify": "Verify that git context extraction with step-level variable access is implemented",
      "fix_suggestion": "Either verify this feature exists in the variable capture system or mark as a planned/future feature",
      "source_reference": "Variable capture and git context needs verification"
    },
    {
      "type": "incorrect_example",
      "severity": "medium",
      "section": "Example 10: Advanced Features",
      "description": "Example shows format modifiers like :json, :lines, :csv in variable interpolation, but this advanced syntax is not verified",
      "current_content": "- shell: \"echo 'Issues found: ${analysis_result:json:.issues | length}'\"\n- shell: \"echo '${analysis_result:csv}' > report.csv\"",
      "should_verify": "Verify that format modifiers and JSONPath syntax in variable interpolation is supported",
      "fix_suggestion": "Either verify these advanced modifiers exist or simplify example to use basic capture_format field",
      "source_reference": "Variable interpolation and format modifiers need verification"
    },
    {
      "type": "missing_content",
      "severity": "medium",
      "section": "Example 5: Conditional Deployment",
      "description": "Example uses 'capture' field but the canonical field name in WorkflowStepCommand is 'capture_output'",
      "current_content": "- shell: \"cargo test --quiet && echo true || echo false\"\n  id: \"test\"\n  capture: \"test_result\"\n  capture_format: \"boolean\"",
      "should_add": "Note that 'capture_output' is the standard field name, though 'capture' may be supported for backwards compatibility",
      "fix_suggestion": "Add a comment explaining that capture_output is the canonical field, or update example to use capture_output",
      "source_reference": "src/config/command.rs:367-368 (capture_output field in WorkflowStepCommand)"
    },
    {
      "type": "incomplete_explanation",
      "severity": "low",
      "section": "Example 3: Foreach Iteration",
      "description": "Example shows 'parallel: 3' but doesn't explain the full range of parallel configuration options",
      "current_content": "parallel: 3\ncontinue_on_error: true",
      "should_add": "Explain that parallel can be:\n  - false (sequential, default)\n  - true (default parallel count)\n  - number (specific parallel count)",
      "fix_suggestion": "Add a comment showing the different parallel config options",
      "source_reference": "src/config/command.rs:223-237 (ParallelConfig enum)"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Example 5: Conditional Deployment",
      "description": "Example lists capture formats in comment but doesn't explain what each format does",
      "current_content": "capture_format: \"boolean\"  # Supported: string, json, lines, number, boolean",
      "should_add": "Brief explanation:\n  - string: Raw text output\n  - json: Parse as JSON object\n  - lines: Split into array of lines\n  - number: Parse as numeric value\n  - boolean: Parse as true/false based on exit code or output",
      "fix_suggestion": "Add a note section or expand the comment to explain each format",
      "source_reference": "features.json:advanced_features.output_capture.formats"
    },
    {
      "type": "missing_content",
      "severity": "low",
      "section": "Example 8: Complex MapReduce with Error Handling",
      "description": "Missing note that error_policy fields are optional with sensible defaults",
      "should_add": "Note that if error_policy is not specified, defaults are: on_item_failure: dlq, continue_on_failure: true, error_collection: aggregate",
      "fix_suggestion": "Add note explaining default behavior so users know they don't need to specify all fields",
      "source_reference": "Mentioned in example note, but could be clearer"
    }
  ],
  "positive_aspects": [
    "Excellent progression from simple (Example 1) to complex (Example 8)",
    "Good coverage of major features: goal_seek, foreach, MapReduce, conditionals, environment",
    "Examples are practical and use real tools (cargo, debtmap, npm, docker)",
    "Well-commented examples that explain key concepts",
    "Example 4 correctly shows MapReduce with JSONPath and includes helpful note",
    "Example 8 shows comprehensive MapReduce with all error handling options",
    "Example 9 (write_file) clearly demonstrates all supported formats",
    "Example 6 shows advanced validation with on_incomplete handler",
    "Most examples are syntactically correct and would parse successfully",
    "Good use of on_failure and on_success handlers in multiple examples"
  ],
  "improvement_suggestions": [
    "Fix Example 7 environment configuration to match actual SecretValue and EnvProfile structure",
    "Verify or remove Example 10's unverified features (cwd, git context, format modifiers)",
    "Update Example 5 to use 'capture_output' as the canonical field name",
    "Add more explanation for capture_format options",
    "Explain parallel configuration options in foreach example",
    "Add an example showing retry configuration with backoff strategies",
    "Include an example of nested on_failure handlers with max_attempts",
    "Add example showing MapReduce setup phase with capture_outputs",
    "Show timeout configuration at different levels (command, workflow)",
    "Add troubleshooting tips or common mistakes section",
    "Link to specific book chapters for deeper dives into features",
    "Consider adding a best practices callout referencing the features inventory"
  ],
  "metadata": {
    "analyzed_at": "2025-01-12",
    "feature_inventory": ".prodigy/book-analysis/features.json",
    "topics_covered": [
      "Basic build and test workflows",
      "Goal seeking for iterative improvement",
      "Foreach iteration (sequential and parallel)",
      "MapReduce parallel processing",
      "Conditional execution with when clauses",
      "Output capture with multiple formats",
      "Multi-step validation with on_incomplete",
      "Environment variables, secrets, and profiles",
      "Complex error handling and DLQ",
      "File generation with write_file",
      "Advanced features (nested handlers, git context)"
    ],
    "validation_focus": "Check examples are valid and work with current syntax"
  }
}
