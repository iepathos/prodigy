name: debtmap-parallel-elimination
mode: mapreduce

# Setup phase: Analyze the codebase and generate debt items
setup:
  timeout: 900  # 15 minutes for coverage generation
  commands:
    # Generate coverage data with tarpaulin
    - shell: "just coverage-lcov"

    # Run debtmap with coverage data
    - shell: "debtmap analyze src --lcov target/coverage/lcov.info --output debtmap.json --format json"

# Map phase: Process each debt item in parallel
map:
  # Input configuration - debtmap.json contains items array
  input: debtmap.json
  json_path: "$.items[*]"

  # Commands to execute for each debt item (simplified syntax)
  agent_template:
    - claude: |
        /fix-debt-item --json '${item}'
      commit_required: true

    # Run tests to verify the fix
    - shell: "just test"
      on_failure:
        claude: "/prodigy-debug-test-failure --output '${shell.output}'"

    # Check formatting and linting
    - shell: "just fmt-check && just lint"
      on_failure:
        claude: "/prodigy-lint '${shell.output}'"

  # Parallelization settings
  max_parallel: 5  # Run up to 5 agents in parallel

  # Process high-score items first
  filter: "unified_score.final_score >= 5"  # Only process items with score >= 5
  sort_by: "unified_score.final_score DESC"  # Process highest score items first
  max_items: 10  # Limit to 10 items per run

# Reduce phase: Aggregate results and finalize (simplified syntax)
reduce:
  - shell: "just test"
    on_failure:
      claude: "/prodigy-debug-test-failure --output '${shell.output}'"

  - shell: "just fmt-check && just lint"
    on_failure:
      claude: "/prodigy-lint ${shell.output}"

  # Re-run debtmap to measure improvements
  - shell: "just coverage-lcov"

  - shell: "debtmap analyze src --lcov target/coverage/lcov.info --output debtmap-after.json --format json"

  # Compare debt metrics and create final commit with summary
  - claude: |
      /prodigy-compare-debt-results \
        --before debtmap.json \
        --after debtmap-after.json \
        --map-results '${map.results}' \
        --successful ${map.successful} \
        --failed ${map.failed} \
        --total ${map.total}
    commit_required: true

