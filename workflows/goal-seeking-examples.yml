# Example workflows demonstrating goal-seeking capabilities
# These show different use cases for iterative refinement with validation

# Example 1: Test Coverage Improvement
# Iteratively improves test coverage until reaching target threshold
- goal_seek:
    goal: "Achieve 90% test coverage"
    claude: "/prodigy-coverage --improve"
    validate: "cargo tarpaulin --print-summary 2>/dev/null | grep 'Coverage' | sed 's/.*Coverage=\\([0-9]*\\).*/score: \\1/'"
    threshold: 90
    max_attempts: 5
    timeout_seconds: 300
    fail_on_incomplete: true
  commit_required: true

# Example 2: Performance Optimization
# Iteratively optimizes code performance based on benchmark results
- goal_seek:
    goal: "Optimize algorithm performance to under 100ms"
    claude: " /optimize-performance --target 100ms"
    validate: "cargo bench --bench main_bench 2>/dev/null | grep 'time:' | awk '{if ($2 < 100) print \"score: 95\"; else print \"score:\", int(10000/$2)}'"
    threshold: 90
    max_attempts: 4
    timeout_seconds: 600
  commit_required: true

# Example 3: Code Quality Improvement
# Uses linting and quality checks to iteratively improve code
- goal_seek:
    goal: "Fix all clippy warnings and improve code quality"
    claude: " /fix-clippy-warnings"
    validate: |
      warnings=$(cargo clippy 2>&1 | grep -c warning || echo 0)
      if [ "$warnings" -eq 0 ]; then
        echo "score: 100"
      else
        score=$((100 - warnings * 5))
        echo "score: $score"
      fi
    threshold: 95
    max_attempts: 3
    fail_on_incomplete: false
  commit_required: true

# Example 4: Documentation Coverage
# Ensures all public APIs are documented
- goal_seek:
    goal: "Document all public APIs"
    claude: " /add-missing-docs"
    validate: |
      missing=$(cargo doc --no-deps 2>&1 | grep -c "missing documentation" || echo 0)
      if [ "$missing" -eq 0 ]; then
        echo "score: 100"
      else
        score=$((100 - missing * 2))
        echo "score: $score"
      fi
    threshold: 100
    max_attempts: 3
  commit_required: true

# Example 5: Spec Implementation Validation
# Validates that implementation matches specification requirements
- goal_seek:
    goal: "Implement authentication spec completely"
    claude: " /implement-spec @specs/auth.md"
    validate: "prodigy validate-spec --spec specs/auth.md --json | jq -r '.coverage_percentage' | awk '{print \"score:\", int($1)}'"
    threshold: 95
    max_attempts: 5
    timeout_seconds: 900
    fail_on_incomplete: true
  commit_required: true

# Example 6: Test Debugging with Goal Seeking
# Fixes failing tests iteratively
- shell: "cargo test"
  on_failure:
    goal_seek:
      goal: "Fix all failing tests"
      claude: " /debug-test-failures"
      validate: |
        cargo test 2>&1 | grep -q "test result: ok" && echo "score: 100" || {
          passed=$(cargo test 2>&1 | grep -oP '\d+(?= passed)' | head -1)
          failed=$(cargo test 2>&1 | grep -oP '\d+(?= failed)' | head -1)
          total=$((passed + failed))
          if [ "$total" -gt 0 ]; then
            score=$((passed * 100 / total))
            echo "score: $score"
          else
            echo "score: 0"
          fi
        }
      threshold: 100
      max_attempts: 3
      fail_on_incomplete: true

# Example 7: Multi-stage Goal Seeking
# Combines multiple goal-seeking operations in sequence
- name: "Complete feature implementation with quality checks"
  goal_seek:
    goal: "Implement user profile feature"
    claude: " /implement-feature user-profile"
    validate: "test -f src/features/user_profile.rs && echo 'score: 100' || echo 'score: 0'"
    threshold: 100
    max_attempts: 2

- name: "Add comprehensive tests"
  goal_seek:
    goal: "Add tests for user profile feature"
    claude: " /add-tests src/features/user_profile.rs"
    validate: |
      test_count=$(grep -c "#\[test\]" src/features/user_profile.rs || echo 0)
      if [ "$test_count" -ge 5 ]; then
        echo "score: 100"
      else
        score=$((test_count * 20))
        echo "score: $score"
      fi
    threshold: 100
    max_attempts: 3

- name: "Ensure tests pass"
  goal_seek:
    goal: "Make all user profile tests pass"
    claude: " /fix-tests user_profile"
    validate: "cargo test user_profile 2>&1 | grep -q 'test result: ok' && echo 'score: 100' || echo 'score: 0'"
    threshold: 100
    max_attempts: 4
    fail_on_incomplete: true