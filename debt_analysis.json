{
  "items": [
    {
      "location": {
        "file": "./src/init/mod.rs",
        "function": "handle_existing_commands",
        "line": 126
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 9,
          "cognitive": 25
        }
      },
      "unified_score": {
        "complexity_factor": 7.4,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validate_2_preconditions (confidence: 63%), process_input_pipeline (confidence: 53%), process_input_pipeline (confidence: 54%) to reduce complexity from 9 to ~0",
        "rationale": "Cyclomatic complexity of 9 indicates 9 independent paths requiring 9 test cases minimum - extraction will reduce this to 3-5 tests per function. Function has 3 extractable patterns that can be isolated. These 3 extractions will decompose the function into smaller, focused units that are easier to test and understand. Target complexity per function is 5 or less for optimal maintainability.",
        "implementation_steps": [
          "1. Extract guard chain pattern at lines 1-4 as 'validate_2_preconditions' (complexity 9 → 7)",
          "2. Extract transformation pipeline pattern at lines 1-6 as 'process_input_pipeline' (complexity 9 → 3)",
          "3. Extract transformation pipeline pattern at lines 1-5 as 'process_input_pipeline' (complexity 9 → 5)",
          "5. Write unit tests for each extracted pure function",
          "6. Add property-based tests for complex transformations",
          "Expected complexity reduction: 133%"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "tests::test_handle_existing_commands_no_tty",
        "run",
        "tests::test_handle_existing_commands_with_conflicts"
      ],
      "downstream_callees": [
        "UserPrompterImpl::read_line",
        "SessionEvent::is_terminal",
        "MockFileSystem::exists",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 3,
      "function_length": 51,
      "cyclomatic_complexity": 9,
      "cognitive_complexity": 25,
      "entropy_details": {
        "entropy_score": 0.6037848602976024,
        "pattern_repetition": 0.647887323943662,
        "original_complexity": 9,
        "adjusted_complexity": 9,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/config/metadata_parser.rs",
        "function": "MetadataParser::extract_description",
        "line": 93
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 7,
          "cognitive": 15
        }
      },
      "unified_score": {
        "complexity_factor": 6.2,
        "coverage_factor": 10.0,
        "dependency_factor": 4.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract nested processing, complex calculations to reduce complexity 7 → ~2",
        "rationale": "Complex function (cyclo=7, cog=15, nesting=4) with 2 suggested extraction patterns. Predicted complexity reduction: 71%",
        "implementation_steps": [
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 4,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "MetadataParser::convert_frontmatter_to_definition",
        "tests::test_extract_description_multiline",
        "MetadataParser::create_minimal_definition",
        "MetadataParser::parse_sections"
      ],
      "downstream_callees": [
        "GitDiff::is_empty"
      ],
      "nesting_depth": 4,
      "function_length": 33,
      "cyclomatic_complexity": 7,
      "cognitive_complexity": 15,
      "entropy_details": {
        "entropy_score": 0.5347219335305149,
        "pattern_repetition": 0.6,
        "original_complexity": 7,
        "adjusted_complexity": 7,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/config/metadata_parser.rs",
        "function": "MetadataParser::parse_options",
        "line": 196
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 21
        }
      },
      "unified_score": {
        "complexity_factor": 6.9,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 8 → ~0",
        "rationale": "Complex function (cyclo=8, cog=21, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 0,
      "upstream_callers": [
        "MetadataParser::parse_sections"
      ],
      "downstream_callees": [],
      "nesting_depth": 5,
      "function_length": 35,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 21,
      "entropy_details": {
        "entropy_score": 0.45903319254942226,
        "pattern_repetition": 0.6865671641791045,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/config/command_parser.rs",
        "function": "parse_command_string",
        "line": 14
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 10,
          "cognitive": 13
        }
      },
      "unified_score": {
        "complexity_factor": 6.3,
        "coverage_factor": 10.0,
        "dependency_factor": 11.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validate_2_preconditions (confidence: 63%) to reduce complexity from 10 to ~8",
        "rationale": "Cyclomatic complexity of 10 indicates 10 independent paths requiring 10 test cases minimum - extraction will reduce this to 3-5 tests per function. Function has 1 extractable patterns that can be isolated. This extraction will create a focused, testable unit. Target complexity per function is 5 or less for optimal maintainability.",
        "implementation_steps": [
          "1. Extract guard chain pattern at lines 1-4 as 'validate_2_preconditions' (complexity 10 → 8)",
          "3. Write unit tests for each extracted pure function",
          "4. Add property-based tests for complex transformations",
          "Expected complexity reduction: 20%"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 11,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "tests::test_parse_complex_command",
        "tests::test_parse_command_with_variable",
        "tests::test_parse_command_with_slash",
        "tests::test_parse_command_with_options",
        "tests::test_parse_simple_command",
        "tests::test_command_string_parsing",
        "tests::test_parse_command_string_with_variables",
        "tests::test_parse_command_with_args",
        "tests::test_parse_command_string_empty",
        "tests::test_parse_command_string_simple",
        "Command::from_string"
      ],
      "downstream_callees": [
        "CommandArg::parse",
        "GitDiff::is_empty",
        "Command::new"
      ],
      "nesting_depth": 4,
      "function_length": 66,
      "cyclomatic_complexity": 10,
      "cognitive_complexity": 13,
      "entropy_details": {
        "entropy_score": 0.5961365802810795,
        "pattern_repetition": 0.7768595041322314,
        "original_complexity": 10,
        "adjusted_complexity": 10,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/config/command_discovery.rs",
        "function": "CommandDiscovery::scan_commands",
        "line": 34
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 12,
          "cognitive": 43
        }
      },
      "unified_score": {
        "complexity_factor": 9.5,
        "coverage_factor": 10.0,
        "dependency_factor": 5.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 12 → ~1",
        "rationale": "Complex function (cyclo=12, cog=43, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 91%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract calculations from 8 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 5,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "tests::test_cache_behavior",
        "tests::test_scan_empty_directory",
        "tests::test_scan_commands_filters_correctly",
        "tests::test_needs_refresh",
        "DynamicCommandRegistry::refresh"
      ],
      "downstream_callees": [
        "CommandRegistry::clone"
      ],
      "nesting_depth": 3,
      "function_length": 70,
      "cyclomatic_complexity": 12,
      "cognitive_complexity": 43,
      "entropy_details": {
        "entropy_score": 0.4562861289377882,
        "pattern_repetition": 0.7053571428571429,
        "original_complexity": 12,
        "adjusted_complexity": 12,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/config/command_validator.rs",
        "function": "CommandRegistry::validate_command",
        "line": 226
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 30
        }
      },
      "unified_score": {
        "complexity_factor": 8.3,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 13 → ~2",
        "rationale": "Complex function (cyclo=13, cog=30, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 84%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "validate_command"
      ],
      "downstream_callees": [
        "CacheManager::get",
        "CommandRegistry::validate_option_value",
        "CommandArg::is_variable",
        "CommandRegistry::validate_argument_type"
      ],
      "nesting_depth": 4,
      "function_length": 56,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 30,
      "entropy_details": {
        "entropy_score": 0.5473034310829922,
        "pattern_repetition": 0.7474747474747475,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/config/loader.rs",
        "function": "ConfigLoader::load_with_explicit_path",
        "line": 31
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 5,
          "cognitive": 16
        }
      },
      "unified_score": {
        "complexity_factor": 4.2,
        "coverage_factor": 10.0,
        "dependency_factor": 5.0,
        "role_multiplier": 1.0,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 5 → ~2",
        "rationale": "Complex function (cyclo=5, cog=16, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 60%",
        "implementation_steps": [
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 2.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 5,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "tests::test_load_with_default_path",
        "cook",
        "tests::test_load_with_explicit_path_yaml",
        "tests::test_load_with_no_config_uses_defaults",
        "tests::test_load_with_explicit_path_nested_workflow"
      ],
      "downstream_callees": [
        "MockFileSystem::exists",
        "ConfigLoader::load_from_path"
      ],
      "nesting_depth": 2,
      "function_length": 25,
      "cyclomatic_complexity": 5,
      "cognitive_complexity": 16,
      "entropy_details": {
        "entropy_score": 0.5991955553999495,
        "pattern_repetition": 0.6153846153846154,
        "original_complexity": 5,
        "adjusted_complexity": 5,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/config/loader.rs",
        "function": "ConfigLoader::load_from_path",
        "line": 54
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 52
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 4.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 13 → ~0",
        "rationale": "Complex function (cyclo=13, cog=52, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract calculations from 10 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 4,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "tests::test_load_from_path_unsupported_format",
        "tests::test_load_from_path_nonexistent_file",
        "tests::test_load_from_path_invalid_yaml",
        "ConfigLoader::load_with_explicit_path"
      ],
      "downstream_callees": [
        "CacheManager::get",
        "CommandRegistry::clone"
      ],
      "nesting_depth": 3,
      "function_length": 61,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 52,
      "entropy_details": {
        "entropy_score": 0.3829497719935399,
        "pattern_repetition": 0.8113207547169812,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/config/dynamic_registry.rs",
        "function": "DynamicCommandRegistry::validate_strict",
        "line": 118
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 12,
          "cognitive": 27
        }
      },
      "unified_score": {
        "complexity_factor": 7.9,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 12 → ~2",
        "rationale": "Complex function (cyclo=12, cog=27, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 83%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 5 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "DynamicCommandRegistry::validate_against_definition"
      ],
      "downstream_callees": [
        "DynamicCommandRegistry::validate_option_value",
        "CommandArg::is_variable",
        "DynamicCommandRegistry::validate_argument_type"
      ],
      "nesting_depth": 4,
      "function_length": 52,
      "cyclomatic_complexity": 12,
      "cognitive_complexity": 27,
      "entropy_details": {
        "entropy_score": 0.5667313469045061,
        "pattern_repetition": 0.7415730337078652,
        "original_complexity": 12,
        "adjusted_complexity": 12,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::new",
        "line": 102
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 17
        }
      },
      "unified_score": {
        "complexity_factor": 6.5,
        "coverage_factor": 10.0,
        "dependency_factor": 35.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~3",
        "rationale": "Complex function (cyclo=8, cog=17, nesting=1) with 2 suggested extraction patterns. Predicted complexity reduction: 62%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 35,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "test_list_interrupted_sessions_with_mixed_states",
        "test_list_sessions",
        "tests::test_update_checkpoint_increments_iteration",
        "test_state_file_creation",
        "test_list_sessions_with_state",
        "test_list_interrupted_sessions_empty",
        "test_merge_already_merged",
        "test_list_interrupted_sessions_none_interrupted",
        "tests::test_verify_git_repository_not_a_repo",
        "test_metadata_sessions_exclude_cleaned_up",
        "test_worktree_manager_creation",
        "test_create_session_with_generated_name",
        "test_cleanup_session",
        "test_list_interrupted_sessions_all_interrupted",
        "test_gitignore_creation",
        "tests::create_test_worktree_manager",
        "tests::test_cleanup_session_after_merge_not_merged",
        "test_list_sessions_with_metadata_fallback",
        "test_list_sessions_includes_all_prodigy_branches",
        "tests::test_merge_session_success",
        "DefaultCookOrchestrator::cleanup",
        "core_tests::test_handle_worktree_merge",
        "test_state_error_handling",
        "test_merge_session",
        "tests::test_merge_session_claude_cli_failure",
        "DefaultCookOrchestrator::setup_environment",
        "tests::test_detect_mergeable_sessions_empty",
        "tests::test_verify_git_repository_success",
        "WorkflowExecutor::execute_mapreduce",
        "test_merge_updates_state",
        "run_worktree_command",
        "test_state_updates",
        "test_create_session_with_uuid_name",
        "tests::test_update_checkpoint_success",
        "tests::test_claude_merge_command_construction"
      ],
      "downstream_callees": [
        "MockFileSystem::exists"
      ],
      "nesting_depth": 1,
      "function_length": 53,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 17,
      "entropy_details": {
        "entropy_score": 0.3894741104413698,
        "pattern_repetition": 0.7666666666666667,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::merge_session",
        "line": 403
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 23,
          "cognitive": 74
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 4.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 23 → ~2",
        "rationale": "Complex function (cyclo=23, cog=74, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 91%",
        "implementation_steps": [
          "Identify validation checks from 5 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 14 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 11.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 4,
      "downstream_dependencies": 15,
      "upstream_callers": [
        "handle_merge_command",
        "tests::test_merge_session_success",
        "DefaultCookOrchestrator::cleanup",
        "tests::test_merge_session_claude_cli_failure"
      ],
      "downstream_callees": [
        "ProcessCommandBuilder::arg",
        "SubprocessManager::runner",
        "ProcessCommandBuilder::build",
        "GitDiff::is_empty",
        "DefaultCookOrchestrator::run",
        "WorktreeManager::update_session_state",
        "WorktreeManager::cleanup_session_after_merge",
        "ProcessCommandBuilder::current_dir",
        "ProcessCommandBuilder::args",
        "WorktreeManager::list_sessions",
        "WorktreeManager::get_cleanup_config",
        "ProcessCommandBuilder::env",
        "MockFileSystem::exists",
        "ProcessCommandBuilder::new",
        "MockProgressDisplay::success"
      ],
      "nesting_depth": 5,
      "function_length": 197,
      "cyclomatic_complexity": 23,
      "cognitive_complexity": 74,
      "entropy_details": {
        "entropy_score": 0.37668453222919,
        "pattern_repetition": 0.8604651162790697,
        "original_complexity": 23,
        "adjusted_complexity": 23,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::cleanup_session",
        "line": 602
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 22
        }
      },
      "unified_score": {
        "complexity_factor": 7.0,
        "coverage_factor": 10.0,
        "dependency_factor": 19.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~2",
        "rationale": "Complex function (cyclo=8, cog=22, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 75%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 19,
      "downstream_dependencies": 7,
      "upstream_callers": [
        "test_state_updates",
        "test_merge_updates_state",
        "test_merge_session",
        "test_list_interrupted_sessions_all_interrupted",
        "WorktreeManager::cleanup_session_after_merge",
        "test_list_interrupted_sessions_none_interrupted",
        "test_cleanup_session",
        "test_list_interrupted_sessions_with_mixed_states",
        "test_create_session_with_uuid_name",
        "test_list_sessions_includes_all_prodigy_branches",
        "WorktreeManager::cleanup_all_sessions",
        "test_state_file_creation",
        "test_list_sessions_with_state",
        "test_create_session_with_generated_name",
        "handle_merge_command",
        "test_list_sessions",
        "test_merge_already_merged",
        "handle_single_cleanup",
        "test_list_sessions_with_metadata_fallback"
      ],
      "downstream_callees": [
        "SubprocessManager::runner",
        "ProcessCommandBuilder::args",
        "ProcessCommandBuilder::build",
        "ProcessCommandBuilder::new",
        "ProcessCommandBuilder::current_dir",
        "MockProgressDisplay::success",
        "DefaultCookOrchestrator::run"
      ],
      "nesting_depth": 2,
      "function_length": 74,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 22,
      "entropy_details": {
        "entropy_score": 0.408171461131085,
        "pattern_repetition": 0.8288288288288288,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::detect_mergeable_sessions",
        "line": 784
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 25
        }
      },
      "unified_score": {
        "complexity_factor": 7.3,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~1",
        "rationale": "Complex function (cyclo=8, cog=25, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 87%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 5 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 10,
      "upstream_callers": [
        "WorktreeManager::cleanup_merged_sessions",
        "handle_show_mergeable",
        "tests::test_detect_mergeable_sessions_empty"
      ],
      "downstream_callees": [
        "WorktreeManager::list_sessions",
        "MockProgressDisplay::success",
        "WorktreeManager::is_branch_merged",
        "ProcessCommandBuilder::current_dir",
        "DefaultCookOrchestrator::run",
        "SubprocessManager::runner",
        "ProcessCommandBuilder::build",
        "ProcessCommandBuilder::args",
        "ProcessCommandBuilder::new",
        "WorktreeManager::get_session_state"
      ],
      "nesting_depth": 3,
      "function_length": 36,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 25,
      "entropy_details": {
        "entropy_score": 0.5292059957976153,
        "pattern_repetition": 0.6615384615384615,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::cleanup_session_after_merge",
        "line": 860
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 17,
          "cognitive": 36
        }
      },
      "unified_score": {
        "complexity_factor": 9.3,
        "coverage_factor": 10.0,
        "dependency_factor": 4.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 17 → ~6",
        "rationale": "Complex function (cyclo=17, cog=36, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 64%",
        "implementation_steps": [
          "Identify validation checks from 4 branches → extract as validate_*()",
          "Extract calculations from 7 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 8.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 4,
      "downstream_dependencies": 11,
      "upstream_callers": [
        "WorktreeManager::cleanup_merged_sessions",
        "tests::test_cleanup_session_after_merge_not_merged",
        "handle_single_cleanup",
        "WorktreeManager::merge_session"
      ],
      "downstream_callees": [
        "MockProgressDisplay::success",
        "ProcessCommandBuilder::current_dir",
        "ProcessCommandBuilder::args",
        "WorktreeManager::get_session_state",
        "ProcessCommandBuilder::new",
        "MockFileSystem::exists",
        "SubprocessManager::runner",
        "ProcessCommandBuilder::build",
        "DefaultCookOrchestrator::run",
        "WorktreeManager::cleanup_session",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 2,
      "function_length": 72,
      "cyclomatic_complexity": 17,
      "cognitive_complexity": 36,
      "entropy_details": {
        "entropy_score": 0.3973747031416853,
        "pattern_repetition": 0.7964601769911505,
        "original_complexity": 17,
        "adjusted_complexity": 17,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/subprocess/runner.rs",
        "function": "TokioProcessRunner::run",
        "line": 85
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 33,
          "cognitive": 61
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 33 → ~25",
        "rationale": "Complex function (cyclo=33, cog=61, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 24%",
        "implementation_steps": [
          "Identify validation checks from 8 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 16.5,
        "risk_reduction": 3.4276146498279836
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 4,
      "upstream_callers": [],
      "downstream_callees": [
        "CommandRegistry::clone",
        "GitDiff::is_empty",
        "MockProgressDisplay::success",
        "ExitStatus::code"
      ],
      "nesting_depth": 3,
      "function_length": 159,
      "cyclomatic_complexity": 33,
      "cognitive_complexity": 61,
      "entropy_details": {
        "entropy_score": 0.41003250185886553,
        "pattern_repetition": 0.8317307692307693,
        "original_complexity": 33,
        "adjusted_complexity": 33,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/mod.rs",
        "function": "cook",
        "line": 35
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 20,
          "cognitive": 45
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validate_3_preconditions (confidence: 57%) to reduce complexity from 20 to ~17",
        "rationale": "Cyclomatic complexity of 20 indicates 20 independent execution paths, requiring at least 20 test cases for full path coverage. Function has 1 extractable patterns that can be isolated. This extraction will create a focused, testable unit. Target complexity per function is 5 or less for optimal maintainability.",
        "implementation_steps": [
          "1. Extract guard chain pattern at lines 1-4 as 'validate_3_preconditions' (complexity 20 → 17)",
          "3. Write unit tests for each extracted pure function",
          "4. Add property-based tests for complex transformations",
          "Expected complexity reduction: 15%"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 10.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 9,
      "upstream_callers": [
        "run_improvement_loop",
        "execute_command"
      ],
      "downstream_callees": [
        "DefaultCookOrchestrator::run",
        "ConfigLoader::load_with_explicit_path",
        "create_orchestrator",
        "MockFileSystem::is_dir",
        "MockConfigLoader::get_config",
        "CommandRegistry::clone",
        "load_workflow_with_mapreduce",
        "ConfigLoader::new",
        "MockFileSystem::exists"
      ],
      "nesting_depth": 2,
      "function_length": 87,
      "cyclomatic_complexity": 20,
      "cognitive_complexity": 45,
      "entropy_details": {
        "entropy_score": 0.4030312212909219,
        "pattern_repetition": 0.8222222222222222,
        "original_complexity": 20,
        "adjusted_complexity": 20,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/mod.rs",
        "function": "load_playbook_with_mapreduce",
        "line": 225
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 53
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 13 → ~0",
        "rationale": "Complex function (cyclo=13, cog=53, nesting=6) with 3 suggested extraction patterns. Predicted complexity reduction: 115%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 6) → process_*() functions",
          "Extract calculations from 10 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "load_workflow_with_mapreduce",
        "cook_tests::test_load_debtmap_mapreduce_workflow",
        "cook_tests::test_load_mapreduce_workflow"
      ],
      "downstream_callees": [
        "parse_mapreduce_workflow"
      ],
      "nesting_depth": 6,
      "function_length": 94,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 53,
      "entropy_details": {
        "entropy_score": 0.4215721869447708,
        "pattern_repetition": 0.8553459119496856,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/mod.rs",
        "function": "load_playbook",
        "line": 320
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 10,
          "cognitive": 38
        }
      },
      "unified_score": {
        "complexity_factor": 8.8,
        "coverage_factor": 10.0,
        "dependency_factor": 8.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 10 → ~0",
        "rationale": "Complex function (cyclo=10, cog=38, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 110%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 7 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 8,
      "downstream_dependencies": 0,
      "upstream_callers": [
        "DefaultEnvironmentCoordinator::load_configuration",
        "core_tests::test_load_playbook_without_commands_wrapper",
        "load_workflow",
        "cook_tests::test_yaml_error_messages",
        "core_tests::test_load_playbook_json",
        "core_tests::test_load_playbook_yaml",
        "core_tests::test_load_playbook_invalid_format",
        "core_tests::test_load_playbook_nonexistent"
      ],
      "downstream_callees": [],
      "nesting_depth": 5,
      "function_length": 64,
      "cyclomatic_complexity": 10,
      "cognitive_complexity": 38,
      "entropy_details": {
        "entropy_score": 0.49254614620805154,
        "pattern_repetition": 0.7927927927927928,
        "original_complexity": 10,
        "adjusted_complexity": 10,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::execute",
        "line": 409
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 48
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 13 → ~1",
        "rationale": "Complex function (cyclo=13, cog=48, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 92%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.4276146498279836
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 6,
      "upstream_callers": [],
      "downstream_callees": [
        "MapReduceExecutor::load_work_items_with_pipeline",
        "GitDiff::is_empty",
        "CommandRegistry::clone",
        "MapReduceExecutor::execute_map_phase_with_state",
        "MapReduceExecutor::report_summary",
        "MapReduceExecutor::execute_reduce_phase"
      ],
      "nesting_depth": 3,
      "function_length": 73,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 48,
      "entropy_details": {
        "entropy_score": 0.36861009901019215,
        "pattern_repetition": 0.7619047619047619,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::resume_job",
        "line": 504
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 44
        }
      },
      "unified_score": {
        "complexity_factor": 9.7,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 13 → ~0",
        "rationale": "Complex function (cyclo=13, cog=44, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 8 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.390770252694039
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 5,
      "upstream_callers": [],
      "downstream_callees": [
        "MapReduceJobState::is_map_phase_complete",
        "CommandRegistry::clone",
        "MapReduceExecutor::execute_map_phase",
        "FilterExpression::parse",
        "MapReduceJobState::get_retriable_items"
      ],
      "nesting_depth": 4,
      "function_length": 89,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 44,
      "entropy_details": {
        "entropy_score": 0.4048848644815404,
        "pattern_repetition": 0.7480916030534351,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::execute_agent_commands",
        "line": 850
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 43,
          "cognitive": 129
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 43 → ~6",
        "rationale": "Complex function (cyclo=43, cog=129, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 86%",
        "implementation_steps": [
          "Identify validation checks from 10 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 25 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 21.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 12,
      "upstream_callers": [
        "MapReduceExecutor::run_agent"
      ],
      "downstream_callees": [
        "AgentContext::update_with_output",
        "MapReduceExecutor::get_modified_files",
        "MapReduceExecutor::create_agent_branch",
        "OnFailureConfig::should_fail_workflow",
        "MapReduceExecutor::get_worktree_commits",
        "MapReduceExecutor::handle_on_failure",
        "CommandRegistry::clone",
        "ProgressTracker::update_agent_operation",
        "MapReduceExecutor::merge_agent_to_parent",
        "MapReduceExecutor::execute_single_step",
        "AgentContext::new",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 5,
      "function_length": 286,
      "cyclomatic_complexity": 43,
      "cognitive_complexity": 129,
      "entropy_details": {
        "entropy_score": 0.30637185658503935,
        "pattern_repetition": 0.9028871391076116,
        "original_complexity": 43,
        "adjusted_complexity": 43,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::execute_reduce_phase",
        "line": 1336
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 30,
          "cognitive": 77
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 30 → ~6",
        "rationale": "Complex function (cyclo=30, cog=77, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 80%",
        "implementation_steps": [
          "Identify validation checks from 7 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 15 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 15.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 10,
      "upstream_callers": [
        "MapReduceExecutor::execute"
      ],
      "downstream_callees": [
        "MapReduceExecutor::should_auto_merge",
        "InterpolationContext::set",
        "CommandRegistry::clone",
        "InterpolationContext::new",
        "MapReduceExecutor::execute_single_step",
        "AgentContext::new",
        "MapReduceExecutor::validate_reduce_variables",
        "MapReduceExecutor::get_step_display_name",
        "MapReduceExecutor::handle_on_failure",
        "OnFailureConfig::should_fail_workflow"
      ],
      "nesting_depth": 5,
      "function_length": 265,
      "cyclomatic_complexity": 30,
      "cognitive_complexity": 77,
      "entropy_details": {
        "entropy_score": 0.342024218959769,
        "pattern_repetition": 0.8925373134328358,
        "original_complexity": 30,
        "adjusted_complexity": 30,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::execute_shell_command",
        "line": 1802
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 20
        }
      },
      "unified_score": {
        "complexity_factor": 6.8,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~2",
        "rationale": "Complex function (cyclo=8, cog=20, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 75%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 5,
      "upstream_callers": [
        "MapReduceExecutor::execute_single_step",
        "disabled_tests::test_execute_shell_command_success"
      ],
      "downstream_callees": [
        "ExitStatus::code",
        "GitDiff::is_empty",
        "MapReduceExecutor::find_missing_variables",
        "MockProgressDisplay::success",
        "Command::new"
      ],
      "nesting_depth": 2,
      "function_length": 63,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 20,
      "entropy_details": {
        "entropy_score": 0.4610075937942979,
        "pattern_repetition": 0.7789473684210526,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::find_missing_variables",
        "line": 1866
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 12,
          "cognitive": 39
        }
      },
      "unified_score": {
        "complexity_factor": 9.1,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 12 → ~0",
        "rationale": "Complex function (cyclo=12, cog=39, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 7 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 0,
      "upstream_callers": [
        "MapReduceExecutor::validate_reduce_variables",
        "MapReduceExecutor::execute_shell_command"
      ],
      "downstream_callees": [],
      "nesting_depth": 5,
      "function_length": 59,
      "cyclomatic_complexity": 12,
      "cognitive_complexity": 39,
      "entropy_details": {
        "entropy_score": 0.4819957503848821,
        "pattern_repetition": 0.8376623376623377,
        "original_complexity": 12,
        "adjusted_complexity": 12,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::handle_on_failure",
        "line": 1969
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 11,
          "cognitive": 27
        }
      },
      "unified_score": {
        "complexity_factor": 7.8,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 11 → ~2",
        "rationale": "Complex function (cyclo=11, cog=27, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 81%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 5 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 6,
      "upstream_callers": [
        "MapReduceExecutor::execute_agent_commands",
        "MapReduceExecutor::execute_reduce_phase"
      ],
      "downstream_callees": [
        "OnFailureConfig::should_fail_workflow",
        "OnFailureConfig::should_retry",
        "MapReduceExecutor::execute_single_step",
        "OnFailureConfig::handler",
        "CommandRegistry::clone",
        "OnFailureConfig::max_retries"
      ],
      "nesting_depth": 4,
      "function_length": 87,
      "cyclomatic_complexity": 11,
      "cognitive_complexity": 27,
      "entropy_details": {
        "entropy_score": 0.4235463969299942,
        "pattern_repetition": 0.7472527472527473,
        "original_complexity": 11,
        "adjusted_complexity": 11,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/data_pipeline.rs",
        "function": "DataPipeline::process",
        "line": 72
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 12,
          "cognitive": 21
        }
      },
      "unified_score": {
        "complexity_factor": 7.3,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 12 → ~9",
        "rationale": "Complex function (cyclo=12, cog=21, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 25%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 6,
      "upstream_callers": [
        "MapReduceExecutor::load_work_items_with_pipeline",
        "tests::test_mapreduce_debtmap_scenario",
        "tests::test_pipeline_complete"
      ],
      "downstream_callees": [
        "Sorter::sort",
        "DataPipeline::apply_field_mapping",
        "CommandRegistry::clone",
        "CacheManager::clear",
        "JsonPath::select",
        "FilterExpression::evaluate"
      ],
      "nesting_depth": 2,
      "function_length": 71,
      "cyclomatic_complexity": 12,
      "cognitive_complexity": 21,
      "entropy_details": {
        "entropy_score": 0.2632454602480688,
        "pattern_repetition": 0.7037037037037037,
        "original_complexity": 12,
        "adjusted_complexity": 12,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/data_pipeline.rs",
        "function": "JsonPath::compile",
        "line": 200
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 22,
          "cognitive": 63
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 22 → ~3",
        "rationale": "Complex function (cyclo=22, cog=63, nesting=6) with 3 suggested extraction patterns. Predicted complexity reduction: 86%",
        "implementation_steps": [
          "Identify validation checks from 5 branches → extract as validate_*()",
          "Extract nested logic (depth 6) → process_*() functions",
          "Extract calculations from 12 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 11.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "DataPipeline::from_config",
        "tests::test_json_path_basic",
        "tests::test_json_path_nested"
      ],
      "downstream_callees": [
        "FilterExpression::parse",
        "GitDiff::is_empty",
        "JsonPath::parse_field"
      ],
      "nesting_depth": 6,
      "function_length": 71,
      "cyclomatic_complexity": 22,
      "cognitive_complexity": 63,
      "entropy_details": {
        "entropy_score": 0.33853922479031856,
        "pattern_repetition": 0.8894230769230769,
        "original_complexity": 22,
        "adjusted_complexity": 22,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/data_pipeline.rs",
        "function": "FilterExpression::compare",
        "line": 635
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 27,
          "cognitive": 32
        }
      },
      "unified_score": {
        "complexity_factor": 9.9,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 27 → ~21",
        "rationale": "Complex function (cyclo=27, cog=32, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 22%",
        "implementation_steps": [
          "Identify validation checks from 6 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 13.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "FilterExpression::evaluate"
      ],
      "downstream_callees": [
        "SessionId::as_str"
      ],
      "nesting_depth": 3,
      "function_length": 70,
      "cyclomatic_complexity": 27,
      "cognitive_complexity": 32,
      "entropy_details": {
        "entropy_score": 0.4930871871361936,
        "pattern_repetition": 0.8205128205128205,
        "original_complexity": 27,
        "adjusted_complexity": 27,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/interpolation.rs",
        "function": "InterpolationContext::resolve_in_current",
        "line": 273
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 11,
          "cognitive": 32
        }
      },
      "unified_score": {
        "complexity_factor": 8.3,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 11 → ~3",
        "rationale": "Complex function (cyclo=11, cog=32, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 72%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "InterpolationContext::resolve_path"
      ],
      "downstream_callees": [
        "CommandRegistry::clone",
        "FilterExpression::parse",
        "CacheManager::get"
      ],
      "nesting_depth": 3,
      "function_length": 42,
      "cyclomatic_complexity": 11,
      "cognitive_complexity": 32,
      "entropy_details": {
        "entropy_score": 0.5799653236833228,
        "pattern_repetition": 0.7195121951219512,
        "original_complexity": 11,
        "adjusted_complexity": 11,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/state.rs",
        "function": "CheckpointManager::save_checkpoint",
        "line": 292
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 11,
          "cognitive": 30
        }
      },
      "unified_score": {
        "complexity_factor": 8.1,
        "coverage_factor": 10.0,
        "dependency_factor": 10.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 11 → ~3",
        "rationale": "Complex function (cyclo=11, cog=30, nesting=1) with 2 suggested extraction patterns. Predicted complexity reduction: 72%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 10,
      "downstream_dependencies": 5,
      "upstream_callers": [
        "DefaultJobStateManager::create_job",
        "DefaultJobStateManager::start_reduce_phase",
        "tests::test_checkpoint_cleanup",
        "tests::test_checkpoint_save_and_load",
        "DefaultJobStateManager::complete_reduce_phase",
        "tests::test_atomic_checkpoint_writes",
        "tests::test_checkpoint_cleanup",
        "tests::test_checkpoint_persistence",
        "DefaultJobStateManager::mark_job_complete",
        "DefaultJobStateManager::update_agent_result"
      ],
      "downstream_callees": [
        "CommandRegistry::clone",
        "CheckpointManager::checkpoint_path",
        "CheckpointManager::cleanup_old_checkpoints",
        "CheckpointManager::metadata_path",
        "CheckpointManager::job_dir"
      ],
      "nesting_depth": 1,
      "function_length": 66,
      "cyclomatic_complexity": 11,
      "cognitive_complexity": 30,
      "entropy_details": {
        "entropy_score": 0.3257244224142616,
        "pattern_repetition": 0.8333333333333334,
        "original_complexity": 11,
        "adjusted_complexity": 11,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/state.rs",
        "function": "CheckpointManager::list_checkpoints",
        "line": 390
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 10,
          "cognitive": 40
        }
      },
      "unified_score": {
        "complexity_factor": 9.0,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 10 → ~0",
        "rationale": "Complex function (cyclo=10, cog=40, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 120%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 8 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "tests::test_checkpoint_cleanup",
        "tests::test_checkpoint_cleanup",
        "CheckpointManager::cleanup_old_checkpoints"
      ],
      "downstream_callees": [
        "MockFileSystem::exists",
        "FilterExpression::parse",
        "CheckpointManager::job_dir"
      ],
      "nesting_depth": 5,
      "function_length": 40,
      "cyclomatic_complexity": 10,
      "cognitive_complexity": 40,
      "entropy_details": {
        "entropy_score": 0.5198216660880954,
        "pattern_repetition": 0.6867469879518072,
        "original_complexity": 10,
        "adjusted_complexity": 10,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::get_step_display_name",
        "line": 423
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 13,
          "cognitive": 31
        }
      },
      "unified_score": {
        "complexity_factor": 7.0,
        "coverage_factor": 10.0,
        "dependency_factor": 8.0,
        "role_multiplier": 0.5,
        "final_score": 10.0
      },
      "function_role": "IOWrapper",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 13 → ~2",
        "rationale": "Complex function (cyclo=13, cog=31, nesting=6) with 3 suggested extraction patterns. Predicted complexity reduction: 84%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 6) → process_*() functions",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 8,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "disabled_tests::test_get_step_display_name_test",
        "WorkflowExecutor::handle_no_commits_error",
        "WorkflowExecutor::execute",
        "disabled_tests::test_get_step_display_name_shell",
        "WorkflowExecutor::execute_step",
        "WorkflowExecutor::execute_mapreduce",
        "disabled_tests::test_get_step_display_name_unnamed",
        "disabled_tests::test_get_step_display_name_claude"
      ],
      "downstream_callees": [
        "CommandRegistry::clone"
      ],
      "nesting_depth": 6,
      "function_length": 18,
      "cyclomatic_complexity": 13,
      "cognitive_complexity": 31,
      "entropy_details": {
        "entropy_score": 0.32581040194748384,
        "pattern_repetition": 0.7804878048780488,
        "original_complexity": 13,
        "adjusted_complexity": 13,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute",
        "line": 442
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 45,
          "cognitive": 146
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 45 → ~3",
        "rationale": "Complex function (cyclo=45, cog=146, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 93%",
        "implementation_steps": [
          "Identify validation checks from 11 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 29 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 22.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 15,
      "upstream_callers": [
        "WorkflowExecutor::execute"
      ],
      "downstream_callees": [
        "WorkflowExecutor::should_stop_early_in_test_mode",
        "ProgressDisplayImpl::format_duration",
        "GitDiff::is_empty",
        "WorkflowExecutor::execute_mapreduce",
        "TimingTracker::start_command",
        "TimingTracker::start_iteration",
        "WorkflowExecutor::should_continue_iterations",
        "CommandRegistry::clone",
        "WorkflowExecutor::get_current_head",
        "TimingTracker::complete_iteration",
        "TimingTracker::complete_command",
        "WorkflowExecutor::execute_step",
        "WorkflowExecutor::get_step_display_name",
        "WorkflowExecutor::is_focus_tracking_test",
        "WorkflowExecutor::handle_no_commits_error"
      ],
      "nesting_depth": 5,
      "function_length": 249,
      "cyclomatic_complexity": 45,
      "cognitive_complexity": 146,
      "entropy_details": {
        "entropy_score": 0.3663105722817563,
        "pattern_repetition": 0.8624338624338624,
        "original_complexity": 45,
        "adjusted_complexity": 45,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_step",
        "line": 692
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 3,
          "cognitive": 16
        }
      },
      "unified_score": {
        "complexity_factor": 5.699999999999999,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract nested processing, complex calculations to reduce complexity 3 → ~0",
        "rationale": "Complex function (cyclo=3, cog=16, nesting=8) with 2 suggested extraction patterns. Predicted complexity reduction: 166%",
        "implementation_steps": [
          "Extract nested logic (depth 8) → process_*() functions",
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 1.5,
        "risk_reduction": 3.2203364280198477
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 22,
      "upstream_callers": [],
      "downstream_callees": [
        "OnFailureConfig::handler",
        "WorkflowExecutor::execute_shell_with_retry",
        "CommandRegistry::clone",
        "WorkflowExecutor::create_validation_handler",
        "OnFailureConfig::max_retries",
        "CaptureOutput::is_enabled",
        "GitDiff::is_empty",
        "WorkflowExecutor::execute_handler_command",
        "WorkflowExecutor::execute_test_command",
        "WorkflowExecutor::determine_command_type",
        "WorkflowExecutor::execute_step",
        "WorkflowExecutor::get_step_display_name",
        "WorkflowContext::interpolate",
        "ValidationConfig::is_complete",
        "WorkflowExecutor::execute_claude_command",
        "OnFailureConfig::should_fail_workflow",
        "CacheManager::get",
        "WorkflowExecutor::handle_test_mode_execution",
        "OnFailureConfig::should_retry",
        "WorkflowExecutor::execute_shell_command",
        "CaptureOutput::get_variable_name",
        "WorkflowExecutor::execute_validation"
      ],
      "nesting_depth": 8,
      "function_length": 340,
      "cyclomatic_complexity": 3,
      "cognitive_complexity": 16,
      "entropy_details": {
        "entropy_score": 0.3489514486282029,
        "pattern_repetition": 0.8998435054773083,
        "original_complexity": 3,
        "adjusted_complexity": 3,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_handler_command",
        "line": 1033
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 7,
          "cognitive": 19
        }
      },
      "unified_score": {
        "complexity_factor": 6.6,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 7 → ~4",
        "rationale": "Complex function (cyclo=7, cog=19, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 42%",
        "implementation_steps": [
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 10,
      "upstream_callers": [
        "WorkflowExecutor::execute_step"
      ],
      "downstream_callees": [
        "CommandResult::is_success",
        "CommandRegistry::clone",
        "ExecutionContext::add_env_vars",
        "FilterExpression::parse",
        "ExecutionContext::new",
        "ExecutionContext::with_session_id",
        "RealSubprocessExecutor::execute",
        "CacheManager::get",
        "ExecutionContext::with_iteration",
        "WorkflowContext::interpolate"
      ],
      "nesting_depth": 2,
      "function_length": 56,
      "cyclomatic_complexity": 7,
      "cognitive_complexity": 19,
      "entropy_details": {
        "entropy_score": 0.450072772646042,
        "pattern_repetition": 0.7282608695652174,
        "original_complexity": 7,
        "adjusted_complexity": 7,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_shell_command",
        "line": 1110
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 7,
          "cognitive": 17
        }
      },
      "unified_score": {
        "complexity_factor": 6.4,
        "coverage_factor": 10.0,
        "dependency_factor": 4.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 7 → ~4",
        "rationale": "Complex function (cyclo=7, cog=17, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 42%",
        "implementation_steps": [
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 4,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "WorkflowExecutor::execute_test_command",
        "WorkflowExecutor::execute_validation",
        "WorkflowExecutor::execute_step",
        "WorkflowExecutor::execute_shell_with_retry"
      ],
      "downstream_callees": [
        "ExitStatus::code",
        "MockProgressDisplay::success",
        "Command::new"
      ],
      "nesting_depth": 2,
      "function_length": 48,
      "cyclomatic_complexity": 7,
      "cognitive_complexity": 17,
      "entropy_details": {
        "entropy_score": 0.5846826985673478,
        "pattern_repetition": 0.7534246575342466,
        "original_complexity": 7,
        "adjusted_complexity": 7,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_shell_with_retry",
        "line": 1159
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 17,
          "cognitive": 45
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 17 → ~2",
        "rationale": "Complex function (cyclo=17, cog=45, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 88%",
        "implementation_steps": [
          "Identify validation checks from 4 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 8.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "WorkflowExecutor::execute_step"
      ],
      "downstream_callees": [
        "WorkflowExecutor::execute_claude_command",
        "WorkflowContext::interpolate",
        "WorkflowExecutor::execute_shell_command",
        "CommandRegistry::clone"
      ],
      "nesting_depth": 4,
      "function_length": 128,
      "cyclomatic_complexity": 17,
      "cognitive_complexity": 45,
      "entropy_details": {
        "entropy_score": 0.4460733948930548,
        "pattern_repetition": 0.8218390804597702,
        "original_complexity": 17,
        "adjusted_complexity": 17,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_test_command",
        "line": 1288
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 17,
          "cognitive": 45
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 17 → ~2",
        "rationale": "Complex function (cyclo=17, cog=45, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 88%",
        "implementation_steps": [
          "Identify validation checks from 4 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 8.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "WorkflowExecutor::execute_step"
      ],
      "downstream_callees": [
        "WorkflowExecutor::execute_shell_command",
        "WorkflowContext::interpolate",
        "WorkflowExecutor::execute_claude_command",
        "CommandRegistry::clone"
      ],
      "nesting_depth": 4,
      "function_length": 131,
      "cyclomatic_complexity": 17,
      "cognitive_complexity": 45,
      "entropy_details": {
        "entropy_score": 0.4460733948930547,
        "pattern_repetition": 0.8258426966292135,
        "original_complexity": 17,
        "adjusted_complexity": 17,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_mapreduce",
        "line": 1545
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 9,
          "cognitive": 34
        }
      },
      "unified_score": {
        "complexity_factor": 8.3,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 9 → ~1",
        "rationale": "Complex function (cyclo=9, cog=34, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 88%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 8,
      "upstream_callers": [
        "WorkflowExecutor::execute"
      ],
      "downstream_callees": [
        "RealSubprocessExecutor::execute",
        "GitDiff::is_empty",
        "ProgressDisplayImpl::format_duration",
        "WorktreeManager::new",
        "WorkflowExecutor::execute_step",
        "MapReduceExecutor::new",
        "CommandRegistry::clone",
        "WorkflowExecutor::get_step_display_name"
      ],
      "nesting_depth": 3,
      "function_length": 107,
      "cyclomatic_complexity": 9,
      "cognitive_complexity": 34,
      "entropy_details": {
        "entropy_score": 0.437516349810394,
        "pattern_repetition": 0.7777777777777778,
        "original_complexity": 9,
        "adjusted_complexity": 9,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::run",
        "line": 148
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 10,
          "cognitive": 41
        }
      },
      "unified_score": {
        "complexity_factor": 7.5,
        "coverage_factor": 10.0,
        "dependency_factor": 32.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 10 → ~0",
        "rationale": "Complex function (cyclo=10, cog=41, nesting=1) with 2 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 8 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 32,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "tests::test_validate_project_structure_with_symlinks",
        "tests::test_run_init_with_existing_commands",
        "tests::test_init_run_success",
        "RealGitOperations::is_git_repo",
        "WorktreeManager::list_git_worktree_sessions",
        "tests::test_real_git_operations_is_git_repo",
        "subprocess_tests::test_production_runner_success",
        "is_git_repository",
        "tests::test_run_init_force_overwrite",
        "cook",
        "subprocess_tests::test_production_runner_command_not_found",
        "RealSubprocessExecutor::execute",
        "subprocess_tests::test_production_runner_timeout",
        "WorktreeManager::create_session",
        "tests::test_detect_mergeable_sessions_empty",
        "WorktreeManager::cleanup_session",
        "tests::test_run_init_create_commands",
        "tests::test_run_init_specific_commands",
        "RealGitOperations::git_command",
        "subprocess_tests::test_subprocess_manager",
        "tests::test_is_git_repository",
        "RealGitOperations::git_command_in_dir",
        "WorktreeManager::detect_mergeable_sessions",
        "RealCommandRunner::run_with_context",
        "subprocess_tests::test_production_runner_failure",
        "RealClaudeClient::check_availability",
        "RealClaudeClient::execute_command",
        "tests::test_init_run_already_initialized",
        "WorktreeManager::is_branch_merged",
        "WorktreeManager::merge_session",
        "WorktreeManager::cleanup_session_after_merge",
        "RealCommandRunner::run_command"
      ],
      "downstream_callees": [
        "DefaultCookOrchestrator::cleanup",
        "DefaultCookOrchestrator::execute_workflow",
        "DefaultCookOrchestrator::check_prerequisites",
        "DefaultCookOrchestrator::setup_environment"
      ],
      "nesting_depth": 1,
      "function_length": 47,
      "cyclomatic_complexity": 10,
      "cognitive_complexity": 41,
      "entropy_details": {
        "entropy_score": 0.43478105129796857,
        "pattern_repetition": 0.7840909090909091,
        "original_complexity": 10,
        "adjusted_complexity": 10,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::execute_workflow",
        "line": 242
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 23,
          "cognitive": 56
        }
      },
      "unified_score": {
        "complexity_factor": 9.5,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 23 → ~5",
        "rationale": "Complex function (cyclo=23, cog=56, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 78%",
        "implementation_steps": [
          "Identify validation checks from 5 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 11 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 11.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 8,
      "upstream_callers": [
        "DefaultCookOrchestrator::run"
      ],
      "downstream_callees": [
        "DefaultCookOrchestrator::execute_mapreduce_workflow",
        "DefaultCookOrchestrator::execute_workflow_with_args",
        "WorkflowCommand::to_command",
        "apply_command_defaults",
        "DefaultCookOrchestrator::execute_structured_workflow",
        "CommandRegistry::clone",
        "CacheManager::get",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 4,
      "function_length": 194,
      "cyclomatic_complexity": 23,
      "cognitive_complexity": 56,
      "entropy_details": {
        "entropy_score": 0.31775697011569903,
        "pattern_repetition": 0.875,
        "original_complexity": 23,
        "adjusted_complexity": 23,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::execute_structured_workflow",
        "line": 486
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 18,
          "cognitive": 64
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 18 → ~0",
        "rationale": "Complex function (cyclo=18, cog=64, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 4 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 12 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 9.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 6,
      "upstream_callers": [
        "DefaultCookOrchestrator::execute_workflow"
      ],
      "downstream_callees": [
        "CommandRegistry::clone",
        "CommandArg::resolve",
        "apply_command_defaults",
        "DefaultCookOrchestrator::find_files_matching_pattern",
        "GitDiff::is_empty",
        "WorkflowCommand::to_command"
      ],
      "nesting_depth": 5,
      "function_length": 162,
      "cyclomatic_complexity": 18,
      "cognitive_complexity": 64,
      "entropy_details": {
        "entropy_score": 0.42713438711016694,
        "pattern_repetition": 0.8341463414634146,
        "original_complexity": 18,
        "adjusted_complexity": 18,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::execute_and_validate_command",
        "line": 1231
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 18,
          "cognitive": 47
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 18 → ~3",
        "rationale": "Complex function (cyclo=18, cog=47, nesting=4) with 3 suggested extraction patterns. Predicted complexity reduction: 83%",
        "implementation_steps": [
          "Identify validation checks from 4 branches → extract as validate_*()",
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 9.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "DefaultCookOrchestrator::execute_workflow_command"
      ],
      "downstream_callees": [
        "DefaultCookOrchestrator::get_current_head"
      ],
      "nesting_depth": 4,
      "function_length": 87,
      "cyclomatic_complexity": 18,
      "cognitive_complexity": 47,
      "entropy_details": {
        "entropy_score": 0.47857760778595326,
        "pattern_repetition": 0.8297872340425532,
        "original_complexity": 18,
        "adjusted_complexity": 18,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/main.rs",
        "function": "handle_merge_command",
        "line": 294
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 15,
          "cognitive": 49
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.5,
        "final_score": 10.0
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 15 → ~1",
        "rationale": "Complex function (cyclo=15, cog=49, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 93%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 7.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 5,
      "upstream_callers": [
        "run_worktree_command"
      ],
      "downstream_callees": [
        "WorktreeManager::merge_session",
        "GitDiff::is_empty",
        "UserPrompterImpl::read_line",
        "WorktreeManager::list_sessions",
        "WorktreeManager::cleanup_session"
      ],
      "nesting_depth": 5,
      "function_length": 54,
      "cyclomatic_complexity": 15,
      "cognitive_complexity": 49,
      "entropy_details": {
        "entropy_score": 0.5395543757247133,
        "pattern_repetition": 0.71875,
        "original_complexity": 15,
        "adjusted_complexity": 15,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/abstractions/claude.rs",
        "function": "RealClaudeClient::execute_command",
        "line": 344
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 14,
          "cognitive": 47
        }
      },
      "unified_score": {
        "complexity_factor": 10.0,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, nested processing, complex calculations to reduce complexity 14 → ~0",
        "rationale": "Complex function (cyclo=14, cog=47, nesting=5) with 3 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Extract nested logic (depth 5) → process_*() functions",
          "Extract calculations from 9 cognitive complexity → calculate_*()",
          "Add 12 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 7.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 9,
      "upstream_callers": [
        "RealClaudeClient::lint",
        "RealClaudeClient::code_review",
        "RealClaudeClient::implement_spec"
      ],
      "downstream_callees": [
        "SubprocessManager::runner",
        "ProcessCommandBuilder::new",
        "ProcessCommandBuilder::build",
        "MockProgressDisplay::success",
        "ExitStatus::code",
        "ProcessCommandBuilder::arg",
        "RealClaudeClient::is_transient_error",
        "ProcessCommandBuilder::env",
        "DefaultCookOrchestrator::run"
      ],
      "nesting_depth": 5,
      "function_length": 91,
      "cyclomatic_complexity": 14,
      "cognitive_complexity": 47,
      "entropy_details": {
        "entropy_score": 0.46975483509590726,
        "pattern_repetition": 0.7578125,
        "original_complexity": 14,
        "adjusted_complexity": 14,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/abstractions/claude.rs",
        "function": "RealClaudeClient::check_availability",
        "line": 436
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 5,
          "cognitive": 13
        }
      },
      "unified_score": {
        "complexity_factor": 3.6,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.0,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 5 → ~3",
        "rationale": "Complex function (cyclo=5, cog=13, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 40%",
        "implementation_steps": [
          "Extract calculations from 2 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 2.5,
        "risk_reduction": 3.4555966076761946
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 9,
      "upstream_callers": [
        "subprocess_tests::test_claude_runner",
        "RealClaudeClient::check_availability",
        "check_claude_cli"
      ],
      "downstream_callees": [
        "ProcessCommandBuilder::arg",
        "GitDiff::is_empty",
        "MockProgressDisplay::success",
        "ProcessCommandBuilder::build",
        "DefaultCookOrchestrator::run",
        "SubprocessManager::claude",
        "RealClaudeClient::check_availability",
        "SubprocessManager::runner",
        "ProcessCommandBuilder::new"
      ],
      "nesting_depth": 2,
      "function_length": 27,
      "cyclomatic_complexity": 5,
      "cognitive_complexity": 13,
      "entropy_details": {
        "entropy_score": 0.7387424305172803,
        "pattern_repetition": 0.5675675675675675,
        "original_complexity": 5,
        "adjusted_complexity": 5,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/simple_state/state.rs",
        "function": "StateManager::load_or_create",
        "line": 98
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 6,
          "cognitive": 16
        }
      },
      "unified_score": {
        "complexity_factor": 6.2,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 10.0
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract nested processing, complex calculations to reduce complexity 6 → ~1",
        "rationale": "Complex function (cyclo=6, cog=16, nesting=4) with 2 suggested extraction patterns. Predicted complexity reduction: 83%",
        "implementation_steps": [
          "Extract nested logic (depth 4) → process_*() functions",
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "StateManager::new",
        "StateManager::with_root"
      ],
      "downstream_callees": [
        "State::new",
        "MockFileSystem::exists"
      ],
      "nesting_depth": 4,
      "function_length": 42,
      "cyclomatic_complexity": 6,
      "cognitive_complexity": 16,
      "entropy_details": {
        "entropy_score": 0.42057185350753584,
        "pattern_repetition": 0.8214285714285714,
        "original_complexity": 6,
        "adjusted_complexity": 6,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/session/migration.rs",
        "function": "example_migration",
        "line": 34
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 9,
          "cognitive": 36
        }
      },
      "unified_score": {
        "complexity_factor": 8.5,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.3,
        "final_score": 9.80808
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 9 → ~0",
        "rationale": "Complex function (cyclo=9, cog=36, nesting=1) with 2 suggested extraction patterns. Predicted complexity reduction: 100%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 7 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.5,
        "risk_reduction": 3.3617236513341964
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 7,
      "upstream_callers": [],
      "downstream_callees": [
        "SessionTrackerImpl::start_session",
        "SessionManagerAdapter::complete_session",
        "InMemorySessionManager::create_session",
        "InMemorySessionManager::record_event",
        "create_full_featured_manager",
        "SessionOptions::from_flags",
        "core_tests::save_checkpoint"
      ],
      "nesting_depth": 1,
      "function_length": 71,
      "cyclomatic_complexity": 9,
      "cognitive_complexity": 36,
      "entropy_details": {
        "entropy_score": 0.4221732385535555,
        "pattern_repetition": 0.8690476190476191,
        "original_complexity": 9,
        "adjusted_complexity": 9,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::execute_map_phase",
        "line": 688
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 24
        }
      },
      "unified_score": {
        "complexity_factor": 7.2,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 8.974645399353602
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~2",
        "rationale": "Complex function (cyclo=8, cog=24, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 75%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 5,
      "upstream_callers": [
        "MapReduceExecutor::resume_job",
        "MapReduceExecutor::execute_map_phase_with_state"
      ],
      "downstream_callees": [
        "CommandRegistry::clone",
        "ProgressTracker::new",
        "MapReduceExecutor::clone_executor",
        "MapReduceExecutor::run_agent",
        "ProgressTracker::start_timer"
      ],
      "nesting_depth": 2,
      "function_length": 70,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 24,
      "entropy_details": {
        "entropy_score": 0.3995635701410225,
        "pattern_repetition": 0.7894736842105263,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::cleanup_merged_sessions",
        "line": 821
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 19
        }
      },
      "unified_score": {
        "complexity_factor": 6.7,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 8.947410674842994
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~3",
        "rationale": "Complex function (cyclo=8, cog=19, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 62%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 3 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "handle_merged_only_cleanup"
      ],
      "downstream_callees": [
        "WorktreeManager::detect_mergeable_sessions",
        "WorktreeManager::cleanup_session_after_merge"
      ],
      "nesting_depth": 3,
      "function_length": 38,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 19,
      "entropy_details": {
        "entropy_score": 0.5540392691331042,
        "pattern_repetition": 0.6410256410256411,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::list_sessions",
        "line": 259
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 6,
          "cognitive": 13
        }
      },
      "unified_score": {
        "complexity_factor": 5.699999999999999,
        "coverage_factor": 10.0,
        "dependency_factor": 11.0,
        "role_multiplier": 1.3,
        "final_score": 8.573163625232478
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 6 → ~4",
        "rationale": "Complex function (cyclo=6, cog=13, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 33%",
        "implementation_steps": [
          "Extract calculations from 2 cognitive complexity → calculate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 11,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "WorktreeManager::get_worktree_for_branch",
        "handle_list_command",
        "test_list_sessions",
        "test_list_sessions_includes_all_prodigy_branches",
        "WorktreeManager::cleanup_all_sessions",
        "test_list_sessions_with_metadata_fallback",
        "handle_merge_command",
        "WorktreeManager::detect_mergeable_sessions",
        "test_metadata_sessions_exclude_cleaned_up",
        "test_list_sessions_with_state",
        "WorktreeManager::merge_session"
      ],
      "downstream_callees": [
        "MockFileSystem::exists",
        "WorktreeManager::list_metadata_sessions",
        "WorktreeManager::list_git_worktree_sessions"
      ],
      "nesting_depth": 3,
      "function_length": 29,
      "cyclomatic_complexity": 6,
      "cognitive_complexity": 13,
      "entropy_details": {
        "entropy_score": 0.5134839488102789,
        "pattern_repetition": 0.6,
        "original_complexity": 6,
        "adjusted_complexity": 6,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/session/state.rs",
        "function": "WorkflowTiming::from_iterations",
        "line": 259
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 10,
          "cognitive": 17
        }
      },
      "unified_score": {
        "complexity_factor": 6.7,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 8.460766924784744
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 10 → ~8",
        "rationale": "Complex function (cyclo=10, cog=17, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 20%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 0,
      "upstream_callers": [
        "SessionProgress::get_workflow_timing"
      ],
      "downstream_callees": [],
      "nesting_depth": 3,
      "function_length": 54,
      "cyclomatic_complexity": 10,
      "cognitive_complexity": 17,
      "entropy_details": {
        "entropy_score": 0.3121714467007503,
        "pattern_repetition": 0.7916666666666666,
        "original_complexity": 10,
        "adjusted_complexity": 10,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::get_cleanup_config",
        "line": 933
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 1,
          "cognitive": 10
        }
      },
      "unified_score": {
        "complexity_factor": 2.1,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.0,
        "final_score": 8.348183373761932
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 1 → ~0",
        "rationale": "Complex function (cyclo=1, cog=10, nesting=0) with 1 suggested extraction patterns. Predicted complexity reduction: 200%",
        "implementation_steps": [
          "Extract calculations from 2 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 0.5,
        "risk_reduction": 2.5406693201602346
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 1,
      "upstream_callers": [
        "tests::test_get_cleanup_config_from_env",
        "WorktreeManager::merge_session"
      ],
      "downstream_callees": [
        "FilterExpression::parse"
      ],
      "nesting_depth": 0,
      "function_length": 18,
      "cyclomatic_complexity": 1,
      "cognitive_complexity": 10,
      "entropy_details": {
        "entropy_score": 0.5159208368955643,
        "pattern_repetition": 0.75,
        "original_complexity": 1,
        "adjusted_complexity": 1,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/config/metadata_parser.rs",
        "function": "MetadataParser::parse_variables_to_args",
        "line": 165
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 5,
          "cognitive": 12
        }
      },
      "unified_score": {
        "complexity_factor": 5.1,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 8.084999999999999
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 5 → ~3",
        "rationale": "Complex function (cyclo=5, cog=12, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 40%",
        "implementation_steps": [
          "Extract calculations from 2 cognitive complexity → calculate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 2.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "MetadataParser::parse_sections"
      ],
      "downstream_callees": [
        "SessionId::as_str",
        "CacheManager::get"
      ],
      "nesting_depth": 3,
      "function_length": 30,
      "cyclomatic_complexity": 5,
      "cognitive_complexity": 12,
      "entropy_details": {
        "entropy_score": 0.5027176609942725,
        "pattern_repetition": 0.625,
        "original_complexity": 5,
        "adjusted_complexity": 5,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::execute_workflow_with_args",
        "line": 857
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 6,
          "cognitive": 10
        }
      },
      "unified_score": {
        "complexity_factor": 3.3,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.0,
        "final_score": 7.639052631578948
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Refactor to reduce complexity from 6 → ~6",
        "rationale": "Complex function (cyclo=6, cog=10, nesting=2) with 0 suggested extraction patterns. Predicted complexity reduction: 0%",
        "implementation_steps": [
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 3 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.0,
        "risk_reduction": 3.210213603473193
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 7,
      "upstream_callers": [
        "DefaultCookOrchestrator::execute_workflow"
      ],
      "downstream_callees": [
        "DefaultCookOrchestrator::process_workflow_input",
        "ProgressDisplayImpl::format_duration",
        "TimingTracker::complete_iteration",
        "TimingTracker::start_iteration",
        "DefaultCookOrchestrator::collect_workflow_inputs",
        "TimingTracker::new",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 2,
      "function_length": 57,
      "cyclomatic_complexity": 6,
      "cognitive_complexity": 10,
      "entropy_details": {
        "entropy_score": 0.478377963198255,
        "pattern_repetition": 0.6935483870967742,
        "original_complexity": 6,
        "adjusted_complexity": 6,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/config/dynamic_registry.rs",
        "function": "DynamicCommandRegistry::refresh",
        "line": 44
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 4,
          "cognitive": 9
        }
      },
      "unified_score": {
        "complexity_factor": 3.9,
        "coverage_factor": 10.0,
        "dependency_factor": 0.0,
        "role_multiplier": 1.0,
        "final_score": 7.6186
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 4 → ~3",
        "rationale": "Complex function (cyclo=4, cog=9, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 25%",
        "implementation_steps": [
          "Extract calculations from 1 cognitive complexity → calculate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 2.0,
        "risk_reduction": 2.232200774295563
      },
      "transitive_coverage": null,
      "upstream_dependencies": 0,
      "downstream_dependencies": 4,
      "upstream_callers": [],
      "downstream_callees": [
        "MetadataParser::create_minimal_definition",
        "CommandRegistry::clone",
        "CommandDiscovery::scan_commands",
        "MetadataParser::parse_command_file"
      ],
      "nesting_depth": 2,
      "function_length": 26,
      "cyclomatic_complexity": 4,
      "cognitive_complexity": 9,
      "entropy_details": {
        "entropy_score": 0.3833427148885082,
        "pattern_repetition": 0.6829268292682927,
        "original_complexity": 4,
        "adjusted_complexity": 4,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::validate_reduce_variables",
        "line": 2151
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 9,
          "cognitive": 18
        }
      },
      "unified_score": {
        "complexity_factor": 6.7,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 7.233544646391528
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 9 → ~7",
        "rationale": "Complex function (cyclo=9, cog=18, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 22%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "MapReduceExecutor::execute_reduce_phase"
      ],
      "downstream_callees": [
        "MapReduceExecutor::find_missing_variables",
        "GitDiff::is_empty"
      ],
      "nesting_depth": 3,
      "function_length": 82,
      "cyclomatic_complexity": 9,
      "cognitive_complexity": 18,
      "entropy_details": {
        "entropy_score": 0.26400475708331267,
        "pattern_repetition": 0.7763157894736842,
        "original_complexity": 9,
        "adjusted_complexity": 9,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/abstractions/git.rs",
        "function": "RealGitOperations::git_command",
        "line": 88
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 3,
          "cognitive": 11
        }
      },
      "unified_score": {
        "complexity_factor": 2.6999999999999997,
        "coverage_factor": 10.0,
        "dependency_factor": 11.0,
        "role_multiplier": 1.0,
        "final_score": 7.106739130434781
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract complex calculations to reduce complexity 3 → ~1",
        "rationale": "Complex function (cyclo=3, cog=11, nesting=1) with 1 suggested extraction patterns. Predicted complexity reduction: 66%",
        "implementation_steps": [
          "Extract calculations from 2 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 1.5,
        "risk_reduction": 3.34817837475556
      },
      "transitive_coverage": null,
      "upstream_dependencies": 11,
      "downstream_dependencies": 7,
      "upstream_callers": [
        "real_git_tests::test_git_command_success",
        "tests::test_git_command_with_classifier",
        "real_git_tests::test_git_command_failure",
        "RealGitOperations::create_worktree",
        "RealGitOperations::switch_branch",
        "RealGitOperations::create_commit",
        "git_command",
        "RealGitOperations::check_git_status",
        "RealGitOperations::get_last_commit_message",
        "RealGitOperations::stage_all_changes",
        "RealGitOperations::get_current_branch"
      ],
      "downstream_callees": [
        "MockProgressDisplay::success",
        "ProcessCommandBuilder::build",
        "SubprocessManager::runner",
        "DefaultCookOrchestrator::run",
        "ProcessCommandBuilder::new",
        "ExitStatus::code",
        "ProcessCommandBuilder::args"
      ],
      "nesting_depth": 1,
      "function_length": 28,
      "cyclomatic_complexity": 3,
      "cognitive_complexity": 11,
      "entropy_details": {
        "entropy_score": 0.5925512852639037,
        "pattern_repetition": 0.6458333333333334,
        "original_complexity": 3,
        "adjusted_complexity": 3,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/execution/data_pipeline.rs",
        "function": "FilterExpression::evaluate",
        "line": 598
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 20
        }
      },
      "unified_score": {
        "complexity_factor": 5.699999999999999,
        "coverage_factor": 10.0,
        "dependency_factor": 2.0,
        "role_multiplier": 1.3,
        "final_score": 6.907295760531526
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~2",
        "rationale": "Complex function (cyclo=8, cog=20, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 75%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 2,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "DataPipeline::process",
        "FilterExpression::evaluate"
      ],
      "downstream_callees": [
        "FilterExpression::compare",
        "FilterExpression::evaluate",
        "FilterExpression::get_nested_field",
        "FilterExpression::evaluate_function"
      ],
      "nesting_depth": 2,
      "function_length": 24,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 20,
      "entropy_details": {
        "entropy_score": 0.278548641096976,
        "pattern_repetition": 0.711864406779661,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::find_files_matching_pattern",
        "line": 649
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 11,
          "cognitive": 19
        }
      },
      "unified_score": {
        "complexity_factor": 6.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 6.006730506455155
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 11 → ~9",
        "rationale": "Complex function (cyclo=11, cog=19, nesting=3) with 1 suggested extraction patterns. Predicted complexity reduction: 18%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 6,
      "upstream_callers": [
        "DefaultCookOrchestrator::execute_structured_workflow"
      ],
      "downstream_callees": [
        "MockProgressDisplay::success",
        "GitDiff::is_empty",
        "DefaultCookOrchestrator::matches_glob_pattern",
        "ProcessCommandBuilder::current_dir",
        "ProcessCommandBuilder::args",
        "Command::new"
      ],
      "nesting_depth": 3,
      "function_length": 61,
      "cyclomatic_complexity": 11,
      "cognitive_complexity": 19,
      "entropy_details": {
        "entropy_score": 0.4801650554642872,
        "pattern_repetition": 0.6419753086419753,
        "original_complexity": 11,
        "adjusted_complexity": 11,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::cleanup",
        "line": 437
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 11,
          "cognitive": 30
        }
      },
      "unified_score": {
        "complexity_factor": 6.8,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 5.812032742988761
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 11 → ~3",
        "rationale": "Complex function (cyclo=11, cog=30, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 72%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 6 cognitive complexity → calculate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 5.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "DefaultCookOrchestrator::run"
      ],
      "downstream_callees": [
        "WorktreeManager::merge_session",
        "WorktreeManager::new",
        "CommandRegistry::clone"
      ],
      "nesting_depth": 3,
      "function_length": 42,
      "cyclomatic_complexity": 11,
      "cognitive_complexity": 30,
      "entropy_details": {
        "entropy_score": 0.5701255877070273,
        "pattern_repetition": 0.7288135593220338,
        "original_complexity": 11,
        "adjusted_complexity": 11,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/cook/workflow/executor.rs",
        "function": "WorkflowExecutor::execute_validation",
        "line": 1692
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 6,
          "cognitive": 10
        }
      },
      "unified_score": {
        "complexity_factor": 4.8,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.0,
        "final_score": 5.651
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Refactor to reduce complexity from 6 → ~6",
        "rationale": "Complex function (cyclo=6, cog=10, nesting=2) with 0 suggested extraction patterns. Predicted complexity reduction: 0%",
        "implementation_steps": [
          "Add 3 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.0,
        "risk_reduction": 3.3583309376547987
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 5,
      "upstream_callers": [
        "WorkflowExecutor::execute_step"
      ],
      "downstream_callees": [
        "ValidationResult::from_json",
        "ValidationResult::complete",
        "ValidationResult::failed",
        "WorkflowContext::interpolate",
        "WorkflowExecutor::execute_shell_command"
      ],
      "nesting_depth": 2,
      "function_length": 50,
      "cyclomatic_complexity": 6,
      "cognitive_complexity": 10,
      "entropy_details": {
        "entropy_score": 0.48076777843729007,
        "pattern_repetition": 0.7857142857142857,
        "original_complexity": 6,
        "adjusted_complexity": 6,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/orchestrator.rs",
        "function": "DefaultCookOrchestrator::execute_workflow_command",
        "line": 1096
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 6,
          "cognitive": 6
        }
      },
      "unified_score": {
        "complexity_factor": 3.6,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.0,
        "final_score": 5.645
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Refactor to reduce complexity from 6 → ~6",
        "rationale": "Complex function (cyclo=6, cog=6, nesting=1) with 0 suggested extraction patterns. Predicted complexity reduction: 0%",
        "implementation_steps": [
          "Add 3 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 3.0,
        "risk_reduction": 3.275134352394819
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 9,
      "upstream_callers": [
        "DefaultCookOrchestrator::process_workflow_input"
      ],
      "downstream_callees": [
        "CommandRegistry::clone",
        "ProgressDisplayImpl::format_duration",
        "DefaultCookOrchestrator::prepare_environment_variables",
        "DefaultCookOrchestrator::build_command",
        "apply_command_defaults",
        "WorkflowCommand::to_command",
        "DefaultCookOrchestrator::execute_and_validate_command",
        "TimingTracker::start_command",
        "TimingTracker::complete_command"
      ],
      "nesting_depth": 1,
      "function_length": 65,
      "cyclomatic_complexity": 6,
      "cognitive_complexity": 6,
      "entropy_details": {
        "entropy_score": 0.30636660412874034,
        "pattern_repetition": 0.75,
        "original_complexity": 6,
        "adjusted_complexity": 6,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/worktree/manager.rs",
        "function": "WorktreeManager::list_metadata_sessions",
        "line": 355
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 9,
          "cognitive": 24
        }
      },
      "unified_score": {
        "complexity_factor": 7.3,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 5.51702638036652
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 9 → ~3",
        "rationale": "Complex function (cyclo=9, cog=24, nesting=3) with 2 suggested extraction patterns. Predicted complexity reduction: 66%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "WorktreeManager::list_sessions"
      ],
      "downstream_callees": [
        "MockFileSystem::exists",
        "WorktreeSession::new",
        "WorktreeManager::load_state_from_file"
      ],
      "nesting_depth": 3,
      "function_length": 38,
      "cyclomatic_complexity": 9,
      "cognitive_complexity": 24,
      "entropy_details": {
        "entropy_score": 0.4877131164036176,
        "pattern_repetition": 0.7375,
        "original_complexity": 9,
        "adjusted_complexity": 9,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/main.rs",
        "function": "handle_single_cleanup",
        "line": 399
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 20
        }
      },
      "unified_score": {
        "complexity_factor": 6.8,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.5,
        "final_score": 5.380999999999999
      },
      "function_role": "EntryPoint",
      "recommendation": {
        "primary_action": "Extract validation logic, complex calculations to reduce complexity 8 → ~2",
        "rationale": "Complex function (cyclo=8, cog=20, nesting=2) with 2 suggested extraction patterns. Predicted complexity reduction: 75%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Extract calculations from 4 cognitive complexity → calculate_*()",
          "Add 8 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 1,
      "downstream_dependencies": 3,
      "upstream_callers": [
        "handle_clean_command"
      ],
      "downstream_callees": [
        "WorktreeManager::cleanup_session_after_merge",
        "WorktreeManager::cleanup_session",
        "WorktreeManager::get_session_state"
      ],
      "nesting_depth": 2,
      "function_length": 22,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 20,
      "entropy_details": {
        "entropy_score": 0.42660403272362946,
        "pattern_repetition": 0.6666666666666666,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 1.0
    },
    {
      "location": {
        "file": "./src/cook/execution/data_pipeline.rs",
        "function": "DataPipeline::from_config",
        "line": 33
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 12,
          "cognitive": 14
        }
      },
      "unified_score": {
        "complexity_factor": 5.1,
        "coverage_factor": 10.0,
        "dependency_factor": 3.0,
        "role_multiplier": 1.3,
        "final_score": 5.166470991974016
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 12 → ~9",
        "rationale": "Complex function (cyclo=12, cog=14, nesting=2) with 1 suggested extraction patterns. Predicted complexity reduction: 25%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Function is likely pure - focus on breaking down into smaller pure functions",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 6.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 3,
      "downstream_dependencies": 4,
      "upstream_callers": [
        "tests::test_mapreduce_debtmap_scenario",
        "tests::test_pipeline_complete",
        "MapReduceExecutor::load_work_items_with_pipeline"
      ],
      "downstream_callees": [
        "Sorter::parse",
        "GitDiff::is_empty",
        "JsonPath::compile",
        "FilterExpression::parse"
      ],
      "nesting_depth": 2,
      "function_length": 38,
      "cyclomatic_complexity": 12,
      "cognitive_complexity": 14,
      "entropy_details": {
        "entropy_score": 0.23950548654500095,
        "pattern_repetition": 0.8627450980392157,
        "original_complexity": 12,
        "adjusted_complexity": 12,
        "dampening_factor": 1.0
      },
      "is_pure": true,
      "purity_confidence": 0.95
    },
    {
      "location": {
        "file": "./src/simple_state/cache.rs",
        "function": "CacheManager::get",
        "line": 36
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 8,
          "cognitive": 8
        }
      },
      "unified_score": {
        "complexity_factor": 4.8,
        "coverage_factor": 10.0,
        "dependency_factor": 54.0,
        "role_multiplier": 1.0,
        "final_score": 5.010999999999999
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 8 → ~6",
        "rationale": "Complex function (cyclo=8, cog=8, nesting=1) with 1 suggested extraction patterns. Predicted complexity reduction: 25%",
        "implementation_steps": [
          "Identify validation checks from 2 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 4.0,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null,
      "upstream_dependencies": 54,
      "downstream_dependencies": 2,
      "upstream_callers": [
        "JsonPath::evaluate_filter",
        "MetadataParser::parse_variables_to_args",
        "ConfigLoader::load_from_path",
        "FilterExpression::get_nested_field",
        "MockUserInteraction::prompt_yes_no",
        "GitScenarioMock::get_scenario",
        "DataPipeline::extract_field_value",
        "InterpolationContext::resolve_in_current",
        "test::test_cache_manager_edge_cases",
        "CommandRegistry::validate_command",
        "MockFileSystem::read_file",
        "CommandRegistry::get",
        "JsonPath::select",
        "MetadataParser::parse_frontmatter",
        "InMemorySessionManager::save_checkpoint",
        "MockClaudeClient::implement_spec",
        "CommandRegistry::get",
        "test::test_cache_manager",
        "MapReduceExecutor::extract_item_identifier",
        "InMemorySessionManager::start_session",
        "CommandRegistry::execute",
        "InMemorySessionManager::complete_session",
        "CommandRegistry::get_schema",
        "InMemorySessionManager::get_state",
        "ShellHandler::execute",
        "GitCommandType::classify",
        "tests::debug_workflow_parsing_error",
        "MockSubprocessManager::run_command",
        "ClaudeHandler::execute",
        "test::test_corrupted_cache_entry",
        "JsonPath::recursive_descent",
        "Sorter::get_nested_field_value",
        "MockFileSystem::write_file",
        "expand_string",
        "tests::test_json_to_attribute_value_static_nested_object",
        "InMemoryStorage::load",
        "MockClaudeClient::lint",
        "MockGitOperations::git_command",
        "DefaultCookOrchestrator::execute_workflow",
        "FileHandler::execute",
        "InterpolationEngine::parse_template",
        "CommandRegistry::validate",
        "DefaultJobStateManager::get_job_state",
        "GitScenarioMock::execute_command",
        "WorkflowExecutor::execute_step",
        "MockClaudeClient::code_review",
        "InMemorySessionManager::get_progress",
        "CommandArg::resolve",
        "MockClaudeClient::execute_command",
        "test::test_cache_expiration",
        "GitHandler::execute",
        "WorkflowExecutor::execute_handler_command",
        "CargoHandler::execute",
        "CommandRegistry::apply_defaults"
      ],
      "downstream_callees": [
        "MockFileSystem::exists",
        "CacheManager::cache_path"
      ],
      "nesting_depth": 1,
      "function_length": 26,
      "cyclomatic_complexity": 8,
      "cognitive_complexity": 8,
      "entropy_details": {
        "entropy_score": 0.5208060388000458,
        "pattern_repetition": 0.7704918032786885,
        "original_complexity": 8,
        "adjusted_complexity": 8,
        "dampening_factor": 1.0
      },
      "is_pure": false,
      "purity_confidence": 0.8
    },
    {
      "location": {
        "file": "./src/cook/execution/mapreduce.rs",
        "function": "MapReduceExecutor::load_work_items_with_pipeline",
        "line": 602
      },
      "debt_type": {
        "ComplexityHotspot": {
          "cyclomatic": 15,
          "cognitive": 15
        }
      },
      "unified_score": {
        "complexity_factor": 7.0,
        "coverage_factor": 10.0,
        "dependency_factor": 1.0,
        "role_multiplier": 1.3,
        "final_score": 4.969889603929564
      },
      "function_role": "PureLogic",
      "recommendation": {
        "primary_action": "Extract validation logic to reduce complexity 15 → ~12",
        "rationale": "Complex function (cyclo=15, cog=15, nesting=1) with 1 suggested extraction patterns. Predicted complexity reduction: 20%",
        "implementation_steps": [
          "Identify validation checks from 3 branches → extract as validate_*()",
          "Add 4 unit tests (3-5 per extracted function)"
        ],
        "related_items": []
      },
      "expected_impact": {
        "coverage_improvement": 0.0,
        "lines_reduction": 0,
        "complexity_reduction": 7.5,
        "risk_reduction": 3.5
      },
      "transitive_coverage": null
    }
  ]
}
